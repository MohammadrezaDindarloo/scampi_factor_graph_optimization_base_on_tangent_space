// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost2_wrt_fv1_Nl11
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     p_init0: Scalar
 *     p_init1: Scalar
 *     p_init2: Scalar
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost2WrtFv1Nl11(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot, const Scalar p_init0,
    const Scalar p_init1, const Scalar p_init2, const Scalar rot_init_x, const Scalar rot_init_y,
    const Scalar rot_init_z, const Scalar rot_init_w, const Scalar epsilon) {
  // Total ops: 598

  // Unused inputs
  (void)p_init2;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (190)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = Scalar(1.0) * _tmp0 /
                       std::sqrt(Scalar(1 + std::pow(fv1, Scalar(2)) / std::pow(fh1, Scalar(2))));
  const Scalar _tmp3 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp4 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = _tmp3 * _tmp5;
  const Scalar _tmp7 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                       2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp9 = _tmp7 * _tmp8;
  const Scalar _tmp10 = Scalar(0.20999999999999999) * _tmp6 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp11 = -_tmp10;
  const Scalar _tmp12 = 2 * _tmp3 * _tmp7;
  const Scalar _tmp13 = _tmp4 * _tmp8;
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = -Scalar(0.010999999999999999) * _tmp14;
  const Scalar _tmp16 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp17 = 1 - 2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999) * _tmp17;
  const Scalar _tmp19 = _tmp15 + _tmp18;
  const Scalar _tmp20 = _tmp11 + _tmp19;
  const Scalar _tmp21 = _tmp20 + p_init0;
  const Scalar _tmp22 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp17 + Scalar(0.20999999999999999) * _tmp22;
  const Scalar _tmp24 = -_tmp23;
  const Scalar _tmp25 = _tmp5 * _tmp7;
  const Scalar _tmp26 = _tmp3 * _tmp8;
  const Scalar _tmp27 = _tmp25 - _tmp26;
  const Scalar _tmp28 = Scalar(0.010999999999999999) * _tmp27;
  const Scalar _tmp29 = -_tmp28;
  const Scalar _tmp30 = Scalar(0.20999999999999999) * _tmp6 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp31 = _tmp29 + _tmp30;
  const Scalar _tmp32 = _tmp24 + _tmp31;
  const Scalar _tmp33 = _tmp32 + p_init1;
  const Scalar _tmp34 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp35 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp36 = Scalar(0.20999999999999999) * _tmp25 + Scalar(0.20999999999999999) * _tmp26;
  const Scalar _tmp37 = -Scalar(0.010999999999999999) * _tmp16 -
                        Scalar(0.010999999999999999) * _tmp22 + Scalar(-0.010999999999999999);
  const Scalar _tmp38 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp39 = _tmp37 - _tmp38;
  const Scalar _tmp40 = _tmp36 + _tmp39;
  const Scalar _tmp41 = -_tmp30;
  const Scalar _tmp42 = _tmp29 + _tmp41;
  const Scalar _tmp43 = _tmp24 + _tmp42;
  const Scalar _tmp44 = _tmp43 + p_init1;
  const Scalar _tmp45 = _tmp44 + Scalar(8.3196563700000006);
  const Scalar _tmp46 = _tmp15 - _tmp18;
  const Scalar _tmp47 = _tmp11 + _tmp46;
  const Scalar _tmp48 = _tmp47 + p_init0;
  const Scalar _tmp49 = _tmp48 + Scalar(1.9874742000000001);
  const Scalar _tmp50 = std::pow(Scalar(std::pow(_tmp45, Scalar(2)) + std::pow(_tmp49, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp51 = _tmp49 * _tmp50;
  const Scalar _tmp52 = -_tmp36;
  const Scalar _tmp53 = _tmp39 + _tmp52;
  const Scalar _tmp54 = _tmp37 + _tmp38;
  const Scalar _tmp55 = _tmp36 + _tmp54;
  const Scalar _tmp56 = _tmp10 + _tmp19;
  const Scalar _tmp57 = _tmp56 + p_init0;
  const Scalar _tmp58 = _tmp57 + Scalar(-2.71799795);
  const Scalar _tmp59 = _tmp23 + _tmp31;
  const Scalar _tmp60 = _tmp59 + p_init1;
  const Scalar _tmp61 = _tmp60 + Scalar(-4.7752063900000001);
  const Scalar _tmp62 = std::pow(Scalar(std::pow(_tmp58, Scalar(2)) + std::pow(_tmp61, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp63 = _tmp58 * _tmp62;
  const Scalar _tmp64 = _tmp40 * _tmp63 - _tmp55 * _tmp63;
  const Scalar _tmp65 = _tmp45 * _tmp50;
  const Scalar _tmp66 = _tmp23 + _tmp42;
  const Scalar _tmp67 = _tmp66 + p_init1;
  const Scalar _tmp68 = _tmp67 + Scalar(-4.8333311099999996);
  const Scalar _tmp69 = _tmp10 + _tmp46;
  const Scalar _tmp70 = _tmp69 + p_init0;
  const Scalar _tmp71 = _tmp70 + Scalar(1.79662371);
  const Scalar _tmp72 = Scalar(1.0) / (_tmp71);
  const Scalar _tmp73 = _tmp68 * _tmp72;
  const Scalar _tmp74 = _tmp51 * _tmp73 - _tmp65;
  const Scalar _tmp75 = _tmp61 * _tmp62;
  const Scalar _tmp76 = Scalar(1.0) / (_tmp63 * _tmp73 - _tmp75);
  const Scalar _tmp77 = _tmp74 * _tmp76;
  const Scalar _tmp78 = _tmp40 * _tmp73;
  const Scalar _tmp79 = _tmp55 * _tmp75 - _tmp63 * _tmp78;
  const Scalar _tmp80 = -_tmp51 * _tmp78 + _tmp53 * _tmp65 - _tmp77 * _tmp79;
  const Scalar _tmp81 = Scalar(1.0) * _tmp66;
  const Scalar _tmp82 = -_tmp81;
  const Scalar _tmp83 = Scalar(1.0) / (_tmp59 + _tmp82);
  const Scalar _tmp84 = Scalar(1.0) * _tmp69;
  const Scalar _tmp85 = -_tmp56 + _tmp84;
  const Scalar _tmp86 = _tmp83 * _tmp85;
  const Scalar _tmp87 = _tmp40 * _tmp51 - _tmp51 * _tmp53 - _tmp64 * _tmp77 - _tmp80 * _tmp86;
  const Scalar _tmp88 = Scalar(1.0) / (_tmp87);
  const Scalar _tmp89 = _tmp81 * _tmp86 + _tmp84;
  const Scalar _tmp90 = 0;
  const Scalar _tmp91 = _tmp63 * _tmp77;
  const Scalar _tmp92 =
      std::sqrt(Scalar(std::pow(_tmp68, Scalar(2)) + std::pow(_tmp71, Scalar(2))));
  const Scalar _tmp93 = _tmp72 * _tmp92;
  const Scalar _tmp94 = _tmp93 * (_tmp51 * _tmp90 - _tmp90 * _tmp91);
  const Scalar _tmp95 = _tmp73 * _tmp76;
  const Scalar _tmp96 = _tmp78 + _tmp79 * _tmp95;
  const Scalar _tmp97 = -_tmp40 + _tmp64 * _tmp95 - _tmp86 * _tmp96;
  const Scalar _tmp98 = Scalar(1.0) / (_tmp92);
  const Scalar _tmp99 = _tmp93 * (-_tmp66 * _tmp71 * _tmp98 + _tmp68 * _tmp69 * _tmp98);
  const Scalar _tmp100 = -_tmp56 * _tmp75 + _tmp59 * _tmp63 + _tmp63 * _tmp99;
  const Scalar _tmp101 = -_tmp100 * _tmp77 + _tmp43 * _tmp51 - _tmp47 * _tmp65 + _tmp51 * _tmp99;
  const Scalar _tmp102 = _tmp101 * _tmp88;
  const Scalar _tmp103 = Scalar(1.0) / (_tmp101);
  const Scalar _tmp104 = _tmp103 * _tmp87;
  const Scalar _tmp105 = _tmp104 * (_tmp100 * _tmp95 - _tmp102 * _tmp97 - _tmp99);
  const Scalar _tmp106 = _tmp88 * (_tmp105 + _tmp97);
  const Scalar _tmp107 = -_tmp106 * _tmp74 - _tmp73;
  const Scalar _tmp108 = _tmp63 * _tmp76;
  const Scalar _tmp109 = _tmp21 + Scalar(-2.5202214700000001);
  const Scalar _tmp110 = _tmp33 + Scalar(8.3888750099999996);
  const Scalar _tmp111 =
      std::pow(Scalar(std::pow(_tmp109, Scalar(2)) + std::pow(_tmp110, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp112 = _tmp109 * _tmp111;
  const Scalar _tmp113 = _tmp112 * fh1;
  const Scalar _tmp114 = Scalar(1.0) * _tmp76;
  const Scalar _tmp115 = Scalar(1.0) * _tmp83;
  const Scalar _tmp116 = -_tmp114 * _tmp64 + _tmp115 * _tmp76 * _tmp79 * _tmp85;
  const Scalar _tmp117 = _tmp104 * (-_tmp100 * _tmp114 - _tmp102 * _tmp116);
  const Scalar _tmp118 = _tmp88 * (_tmp116 + _tmp117);
  const Scalar _tmp119 = -_tmp118 * _tmp74 + Scalar(1.0);
  const Scalar _tmp120 = _tmp110 * _tmp111;
  const Scalar _tmp121 = _tmp120 * fh1;
  const Scalar _tmp122 = Scalar(1.0) * _tmp103;
  const Scalar _tmp123 = fh1 * (-_tmp112 * _tmp32 + _tmp120 * _tmp20);
  const Scalar _tmp124 = -_tmp113 * _tmp93 * (_tmp106 * _tmp51 + _tmp107 * _tmp108 + Scalar(1.0)) -
                         _tmp121 * _tmp93 * (_tmp108 * _tmp119 + _tmp118 * _tmp51) -
                         _tmp123 * _tmp93 * (_tmp122 * _tmp51 - _tmp122 * _tmp91) - _tmp35 * _tmp94;
  const Scalar _tmp125 = Scalar(1.0) / (_tmp124);
  const Scalar _tmp126 = _tmp43 + _tmp82;
  const Scalar _tmp127 = _tmp126 * _tmp86;
  const Scalar _tmp128 = Scalar(1.0) / (-_tmp127 - _tmp47 + _tmp84);
  const Scalar _tmp129 = Scalar(1.0) * _tmp128;
  const Scalar _tmp130 = _tmp126 * _tmp128;
  const Scalar _tmp131 = -_tmp114 * _tmp79 + _tmp117 * _tmp130 - _tmp118 * _tmp80;
  const Scalar _tmp132 = _tmp105 * _tmp130 - _tmp106 * _tmp80 + _tmp96;
  const Scalar _tmp133 = fh1 * (_tmp52 + _tmp54);
  const Scalar _tmp134 = -_tmp120 * _tmp133 - Scalar(3.29616) * _tmp27 - _tmp32 * fv1;
  const Scalar _tmp135 = _tmp129 * _tmp86;
  const Scalar _tmp136 = _tmp127 * _tmp129 + Scalar(1.0);
  const Scalar _tmp137 = -Scalar(1.0) * _tmp115 * _tmp136 + Scalar(1.0) * _tmp135;
  const Scalar _tmp138 = _tmp112 * _tmp133 + Scalar(3.29616) * _tmp14 + _tmp20 * fv1;
  const Scalar _tmp139 = _tmp126 * _tmp129;
  const Scalar _tmp140 = -Scalar(1.0) * _tmp129 + Scalar(1.0) * _tmp139 * _tmp83;
  const Scalar _tmp141 = _tmp128 * _tmp89;
  const Scalar _tmp142 = _tmp83 * (-_tmp126 * _tmp141 - _tmp80 * _tmp90 + _tmp82);
  const Scalar _tmp143 = -Scalar(1.0) * _tmp129 * _tmp89 - Scalar(1.0) * _tmp142 + Scalar(1.0);
  const Scalar _tmp144 = _tmp104 * _tmp129;
  const Scalar _tmp145 = _tmp104 * _tmp139 - _tmp122 * _tmp80;
  const Scalar _tmp146 = Scalar(1.0) * _tmp113 * (_tmp105 * _tmp129 - _tmp115 * _tmp132) +
                         Scalar(1.0) * _tmp121 * (-_tmp115 * _tmp131 + _tmp117 * _tmp129) +
                         Scalar(1.0) * _tmp123 * (-_tmp115 * _tmp145 + _tmp144) +
                         _tmp134 * _tmp137 + _tmp138 * _tmp140 + _tmp143 * _tmp35;
  const Scalar _tmp147 = std::asinh(_tmp125 * _tmp146);
  const Scalar _tmp148 = Scalar(1.0) * _tmp147;
  const Scalar _tmp149 = std::pow(_tmp124, Scalar(-2));
  const Scalar _tmp150 = _tmp149 * _tmp94;
  const Scalar _tmp151 = _tmp23 + _tmp28 + _tmp41;
  const Scalar _tmp152 =
      (_tmp125 * (_tmp137 * _tmp151 + _tmp140 * _tmp20 - _tmp143) - _tmp146 * _tmp150) /
      std::sqrt(Scalar(std::pow(_tmp146, Scalar(2)) * _tmp149 + 1));
  const Scalar _tmp153 = Scalar(9.6622558468725703) * _tmp124;
  const Scalar _tmp154 =
      -_tmp147 * _tmp153 -
      Scalar(4.8333311099999996) *
          std::sqrt(
              Scalar(std::pow(Scalar(1 - Scalar(0.20689664689659551) * _tmp67), Scalar(2)) +
                     Scalar(0.13817235445745474) *
                         std::pow(Scalar(-Scalar(0.55659957866191134) * _tmp70 - 1), Scalar(2))));
  const Scalar _tmp155 = Scalar(9.6622558468725703) * _tmp94;
  const Scalar _tmp156 = Scalar(0.1034955) * _tmp125;
  const Scalar _tmp157 = _tmp154 * _tmp156;
  const Scalar _tmp158 = _tmp122 * _tmp123;
  const Scalar _tmp159 = _tmp35 * _tmp90;
  const Scalar _tmp160 =
      _tmp107 * _tmp113 * _tmp76 + _tmp119 * _tmp121 * _tmp76 - _tmp158 * _tmp77 - _tmp159 * _tmp77;
  const Scalar _tmp161 = Scalar(1.0) / (_tmp160);
  const Scalar _tmp162 = _tmp129 * _tmp138;
  const Scalar _tmp163 = _tmp126 * _tmp83;
  const Scalar _tmp164 = _tmp136 * _tmp83;
  const Scalar _tmp165 = _tmp113 * _tmp132 * _tmp83 + _tmp121 * _tmp131 * _tmp83 +
                         _tmp123 * _tmp145 * _tmp83 + _tmp134 * _tmp164 + _tmp142 * _tmp35 -
                         _tmp162 * _tmp163;
  const Scalar _tmp166 = std::asinh(_tmp161 * _tmp165);
  const Scalar _tmp167 = Scalar(9.6622558468725703) * _tmp160;
  const Scalar _tmp168 =
      -_tmp166 * _tmp167 -
      Scalar(4.7752063900000001) *
          std::sqrt(
              Scalar(Scalar(0.32397683292140877) *
                         std::pow(Scalar(1 - Scalar(0.36791786395571047) * _tmp57), Scalar(2)) +
                     std::pow(Scalar(1 - Scalar(0.20941503221602112) * _tmp60), Scalar(2))));
  const Scalar _tmp169 = Scalar(0.1034955) * _tmp161;
  const Scalar _tmp170 = _tmp168 * _tmp169;
  const Scalar _tmp171 = Scalar(1.0) * _tmp166;
  const Scalar _tmp172 = Scalar(9.6622558468725703) * _tmp90;
  const Scalar _tmp173 = _tmp172 * _tmp77;
  const Scalar _tmp174 = std::pow(_tmp160, Scalar(-2));
  const Scalar _tmp175 = _tmp129 * _tmp20;
  const Scalar _tmp176 = _tmp174 * _tmp77 * _tmp90;
  const Scalar _tmp177 =
      (_tmp161 * (-_tmp142 + _tmp151 * _tmp164 - _tmp163 * _tmp175) - _tmp165 * _tmp176) /
      std::sqrt(Scalar(std::pow(_tmp165, Scalar(2)) * _tmp174 + 1));
  const Scalar _tmp178 = -_tmp105 * _tmp113 * _tmp128 - _tmp117 * _tmp121 * _tmp128 -
                         _tmp123 * _tmp144 - _tmp134 * _tmp135 + _tmp141 * _tmp35 + _tmp162;
  const Scalar _tmp179 = _tmp106 * _tmp113 + _tmp118 * _tmp121 + _tmp158 + _tmp159;
  const Scalar _tmp180 = Scalar(1.0) / (_tmp179);
  const Scalar _tmp181 = std::asinh(_tmp178 * _tmp180);
  const Scalar _tmp182 = Scalar(1.0) * _tmp181;
  const Scalar _tmp183 = std::pow(_tmp179, Scalar(-2));
  const Scalar _tmp184 = _tmp183 * _tmp90;
  const Scalar _tmp185 = (_tmp178 * _tmp184 + _tmp180 * (-_tmp135 * _tmp151 - _tmp141 + _tmp175)) /
                         std::sqrt(Scalar(std::pow(_tmp178, Scalar(2)) * _tmp183 + 1));
  const Scalar _tmp186 = Scalar(9.6622558468725703) * _tmp179;
  const Scalar _tmp187 =
      -_tmp181 * _tmp186 -
      Scalar(8.3196563700000006) *
          std::sqrt(
              Scalar(std::pow(Scalar(-Scalar(0.12019727204189803) * _tmp44 - 1), Scalar(2)) +
                     Scalar(0.057067943376852184) *
                         std::pow(Scalar(-Scalar(0.50315118556004401) * _tmp48 - 1), Scalar(2))));
  const Scalar _tmp188 = Scalar(0.1034955) * _tmp180;
  const Scalar _tmp189 = _tmp187 * _tmp188;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp34 *
      (-_tmp2 * std::cosh(Scalar(1.0) * _tmp1) +
       _tmp2 *
           std::cosh(
               Scalar(0.1034955) * _tmp0 *
               (-_tmp1 * _tmp34 -
                Scalar(8.3888750099999996) *
                    std::sqrt(Scalar(
                        Scalar(0.090254729040973036) *
                            std::pow(Scalar(1 - Scalar(0.39679052492160538) * _tmp21), Scalar(2)) +
                        std::pow(Scalar(-Scalar(0.11920549523123722) * _tmp33 - 1), Scalar(2)))))));
  _res(1, 0) = _tmp153 * (-Scalar(1.0) * _tmp152 * std::cosh(_tmp148) -
                          (-Scalar(0.1034955) * _tmp150 * _tmp154 +
                           _tmp156 * (-_tmp147 * _tmp155 - _tmp152 * _tmp153)) *
                              std::cosh(_tmp157)) +
               _tmp155 * (-std::sinh(_tmp148) - std::sinh(_tmp157));
  _res(2, 0) = _tmp167 * (-Scalar(1.0) * _tmp177 * std::cosh(_tmp171) -
                          (-Scalar(0.1034955) * _tmp168 * _tmp176 +
                           _tmp169 * (-_tmp166 * _tmp173 - _tmp167 * _tmp177)) *
                              std::cosh(_tmp170)) +
               _tmp173 * (-std::sinh(_tmp170) - std::sinh(_tmp171));
  _res(3, 0) = -_tmp172 * (-std::sinh(_tmp182) - std::sinh(_tmp189)) +
               _tmp186 * (-Scalar(1.0) * _tmp185 * std::cosh(_tmp182) -
                          (Scalar(0.1034955) * _tmp184 * _tmp187 +
                           _tmp188 * (_tmp172 * _tmp181 - _tmp185 * _tmp186)) *
                              std::cosh(_tmp189));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
