// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost1_Nl19
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     p_init0: Scalar
 *     p_init1: Scalar
 *     p_init2: Scalar
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost1Nl19(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot, const Scalar p_init0,
    const Scalar p_init1, const Scalar p_init2, const Scalar rot_init_x, const Scalar rot_init_y,
    const Scalar rot_init_z, const Scalar rot_init_w, const Scalar epsilon) {
  // Total ops: 499

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (157)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp2 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp4 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp4 +
                       Scalar(0.20999999999999999);
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp8 = 2 * _tmp7;
  const Scalar _tmp9 = _tmp3 * _tmp8;
  const Scalar _tmp10 = -_DeltaRot[0] * rot_init_x - _DeltaRot[1] * rot_init_y -
                        _DeltaRot[2] * rot_init_z + _DeltaRot[3] * rot_init_w;
  const Scalar _tmp11 = 2 * _tmp1 * _tmp10;
  const Scalar _tmp12 = _tmp11 + _tmp9;
  const Scalar _tmp13 = -Scalar(0.010999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp1 * _tmp8;
  const Scalar _tmp15 = 2 * _tmp3;
  const Scalar _tmp16 = _tmp10 * _tmp15;
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp14 - Scalar(0.20999999999999999) * _tmp16;
  const Scalar _tmp18 = _tmp13 + _tmp17;
  const Scalar _tmp19 = _tmp18 + _tmp6;
  const Scalar _tmp20 = _tmp19 + p_init0;
  const Scalar _tmp21 = 1 - 2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp16;
  const Scalar _tmp24 = _tmp1 * _tmp15;
  const Scalar _tmp25 = _tmp10 * _tmp8;
  const Scalar _tmp26 = _tmp24 - _tmp25;
  const Scalar _tmp27 = -Scalar(0.010999999999999999) * _tmp26;
  const Scalar _tmp28 = -_tmp23 + _tmp27;
  const Scalar _tmp29 = _tmp22 + _tmp28;
  const Scalar _tmp30 = _tmp29 + p_init1;
  const Scalar _tmp31 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp32 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp33 = -Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 =
      -Scalar(0.010999999999999999) * _tmp2 - Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp36 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp37 = _tmp35 + _tmp36;
  const Scalar _tmp38 = _tmp34 + _tmp37;
  const Scalar _tmp39 = _tmp13 - _tmp17;
  const Scalar _tmp40 = _tmp39 + _tmp5;
  const Scalar _tmp41 = _tmp39 + _tmp6;
  const Scalar _tmp42 = Scalar(1.0) * _tmp41;
  const Scalar _tmp43 = -_tmp22;
  const Scalar _tmp44 = _tmp28 + _tmp43;
  const Scalar _tmp45 = Scalar(1.0) * _tmp44;
  const Scalar _tmp46 = -_tmp45;
  const Scalar _tmp47 = _tmp23 + _tmp27;
  const Scalar _tmp48 = _tmp43 + _tmp47;
  const Scalar _tmp49 = _tmp46 + _tmp48;
  const Scalar _tmp50 = _tmp22 + _tmp47;
  const Scalar _tmp51 = Scalar(1.0) / (_tmp46 + _tmp50);
  const Scalar _tmp52 = _tmp18 + _tmp5;
  const Scalar _tmp53 = _tmp51 * (_tmp42 - _tmp52);
  const Scalar _tmp54 = _tmp49 * _tmp53;
  const Scalar _tmp55 = Scalar(1.0) / (-_tmp40 + _tmp42 - _tmp54);
  const Scalar _tmp56 = Scalar(1.0) * _tmp55;
  const Scalar _tmp57 = _tmp53 * _tmp56;
  const Scalar _tmp58 = _tmp51 * (_tmp54 * _tmp56 + Scalar(1.0));
  const Scalar _tmp59 = _tmp30 + Scalar(-4.8333311099999996);
  const Scalar _tmp60 = _tmp20 + Scalar(1.79662371);
  const Scalar _tmp61 = std::pow(Scalar(std::pow(_tmp59, Scalar(2)) + std::pow(_tmp60, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp62 = _tmp59 * _tmp61;
  const Scalar _tmp63 = _tmp38 * fh1;
  const Scalar _tmp64 = -Scalar(3.29616) * _tmp26 - _tmp29 * fv1 - _tmp62 * _tmp63;
  const Scalar _tmp65 = _tmp42 + _tmp45 * _tmp53;
  const Scalar _tmp66 = _tmp55 * _tmp65;
  const Scalar _tmp67 = 0;
  const Scalar _tmp68 = _tmp35 - _tmp36;
  const Scalar _tmp69 = _tmp33 + _tmp68;
  const Scalar _tmp70 = _tmp40 + p_init0;
  const Scalar _tmp71 = _tmp70 + Scalar(-2.5202214700000001);
  const Scalar _tmp72 = _tmp48 + p_init1;
  const Scalar _tmp73 = _tmp72 + Scalar(8.3888750099999996);
  const Scalar _tmp74 = std::pow(Scalar(std::pow(_tmp71, Scalar(2)) + std::pow(_tmp73, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp75 = _tmp71 * _tmp74;
  const Scalar _tmp76 = _tmp73 * _tmp74;
  const Scalar _tmp77 = _tmp44 + p_init1;
  const Scalar _tmp78 = _tmp77 + Scalar(8.3196563700000006);
  const Scalar _tmp79 = _tmp41 + p_init0;
  const Scalar _tmp80 = _tmp79 + Scalar(1.9874742000000001);
  const Scalar _tmp81 = Scalar(1.0) / (_tmp80);
  const Scalar _tmp82 = _tmp78 * _tmp81;
  const Scalar _tmp83 = _tmp75 * _tmp82 - _tmp76;
  const Scalar _tmp84 = _tmp52 + p_init0;
  const Scalar _tmp85 = _tmp84 + Scalar(-2.71799795);
  const Scalar _tmp86 = _tmp50 + p_init1;
  const Scalar _tmp87 = _tmp86 + Scalar(-4.7752063900000001);
  const Scalar _tmp88 = std::pow(Scalar(std::pow(_tmp85, Scalar(2)) + std::pow(_tmp87, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp89 = _tmp85 * _tmp88;
  const Scalar _tmp90 = _tmp87 * _tmp88;
  const Scalar _tmp91 = Scalar(1.0) / (_tmp82 * _tmp89 - _tmp90);
  const Scalar _tmp92 = _tmp34 + _tmp68;
  const Scalar _tmp93 = _tmp33 + _tmp37;
  const Scalar _tmp94 = _tmp91 * (_tmp89 * _tmp92 - _tmp89 * _tmp93);
  const Scalar _tmp95 = _tmp82 * _tmp92;
  const Scalar _tmp96 = _tmp91 * (-_tmp89 * _tmp95 + _tmp90 * _tmp93);
  const Scalar _tmp97 = _tmp75 * _tmp92;
  const Scalar _tmp98 = _tmp69 * _tmp76 - _tmp82 * _tmp97 - _tmp83 * _tmp96;
  const Scalar _tmp99 = -_tmp53 * _tmp98 - _tmp69 * _tmp75 - _tmp83 * _tmp94 + _tmp97;
  const Scalar _tmp100 = Scalar(1.0) / (_tmp99);
  const Scalar _tmp101 = _tmp100 * _tmp98;
  const Scalar _tmp102 = _tmp51 * (-_tmp101 * _tmp67 + _tmp46 - _tmp49 * _tmp66);
  const Scalar _tmp103 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp104 = Scalar(1.0) * _tmp96;
  const Scalar _tmp105 = _tmp104 * _tmp53 - Scalar(1.0) * _tmp94;
  const Scalar _tmp106 =
      std::sqrt(Scalar(std::pow(_tmp78, Scalar(2)) + std::pow(_tmp80, Scalar(2))));
  const Scalar _tmp107 = Scalar(1.0) / (_tmp106);
  const Scalar _tmp108 = _tmp106 * _tmp81;
  const Scalar _tmp109 = _tmp108 * (_tmp107 * _tmp41 * _tmp78 - _tmp107 * _tmp44 * _tmp80);
  const Scalar _tmp110 = _tmp91 * (_tmp109 * _tmp89 + _tmp50 * _tmp89 - _tmp52 * _tmp90);
  const Scalar _tmp111 = _tmp109 * _tmp75 - _tmp110 * _tmp83 - _tmp40 * _tmp76 + _tmp48 * _tmp75;
  const Scalar _tmp112 = _tmp100 * _tmp111;
  const Scalar _tmp113 = Scalar(1.0) / (_tmp111);
  const Scalar _tmp114 = _tmp113 * _tmp99;
  const Scalar _tmp115 = _tmp114 * (-_tmp105 * _tmp112 - Scalar(1.0) * _tmp110);
  const Scalar _tmp116 = _tmp49 * _tmp55;
  const Scalar _tmp117 = _tmp105 + _tmp115;
  const Scalar _tmp118 = -_tmp101 * _tmp117 - _tmp104 + _tmp115 * _tmp116;
  const Scalar _tmp119 = Scalar(1.0) * _tmp51;
  const Scalar _tmp120 = _tmp62 * fh1;
  const Scalar _tmp121 = _tmp82 * _tmp96 + _tmp95;
  const Scalar _tmp122 = -_tmp121 * _tmp53 + _tmp82 * _tmp94 - _tmp92;
  const Scalar _tmp123 = _tmp114 * (-_tmp109 + _tmp110 * _tmp82 - _tmp112 * _tmp122);
  const Scalar _tmp124 = _tmp100 * (_tmp122 + _tmp123);
  const Scalar _tmp125 = _tmp116 * _tmp123 + _tmp121 - _tmp124 * _tmp98;
  const Scalar _tmp126 = _tmp60 * _tmp61;
  const Scalar _tmp127 = _tmp126 * fh1;
  const Scalar _tmp128 = _tmp114 * _tmp56;
  const Scalar _tmp129 = Scalar(1.0) * _tmp113;
  const Scalar _tmp130 = _tmp128 * _tmp49 - _tmp129 * _tmp98;
  const Scalar _tmp131 = fh1 * (-_tmp126 * _tmp29 + _tmp19 * _tmp62);
  const Scalar _tmp132 = Scalar(3.29616) * _tmp12 + _tmp126 * _tmp63 + _tmp19 * fv1;
  const Scalar _tmp133 = _tmp49 * _tmp51;
  const Scalar _tmp134 = _tmp100 * _tmp67;
  const Scalar _tmp135 = _tmp89 * _tmp91;
  const Scalar _tmp136 = _tmp135 * _tmp83;
  const Scalar _tmp137 = _tmp100 * _tmp117;
  const Scalar _tmp138 = -_tmp137 * _tmp83 + Scalar(1.0);
  const Scalar _tmp139 = -_tmp124 * _tmp83 - _tmp82;
  const Scalar _tmp140 = -_tmp103 * _tmp108 * (-_tmp134 * _tmp136 + _tmp134 * _tmp75) -
                         _tmp108 * _tmp120 * (_tmp135 * _tmp138 + _tmp137 * _tmp75) -
                         _tmp108 * _tmp127 * (_tmp124 * _tmp75 + _tmp135 * _tmp139 + Scalar(1.0)) -
                         _tmp108 * _tmp131 * (-_tmp129 * _tmp136 + _tmp129 * _tmp75);
  const Scalar _tmp141 = Scalar(1.0) / (_tmp140);
  const Scalar _tmp142 = std::asinh(
      _tmp141 * (Scalar(1.0) * _tmp103 * (-Scalar(1.0) * _tmp102 - _tmp56 * _tmp65 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp120 * (_tmp115 * _tmp56 - _tmp118 * _tmp119) +
                 Scalar(1.0) * _tmp127 * (-_tmp119 * _tmp125 + _tmp123 * _tmp56) +
                 Scalar(1.0) * _tmp131 * (-_tmp119 * _tmp130 + _tmp128) +
                 Scalar(1.0) * _tmp132 * (_tmp133 * _tmp56 - _tmp56) +
                 Scalar(1.0) * _tmp64 * (_tmp57 - Scalar(1.0) * _tmp58)));
  const Scalar _tmp143 = Scalar(9.6622558468725703) * _tmp140;
  const Scalar _tmp144 = _tmp51 * fh1;
  const Scalar _tmp145 = _tmp132 * _tmp56;
  const Scalar _tmp146 = _tmp103 * _tmp134;
  const Scalar _tmp147 = _tmp83 * _tmp91;
  const Scalar _tmp148 = _tmp129 * _tmp131;
  const Scalar _tmp149 = _tmp120 * _tmp138 * _tmp91 + _tmp127 * _tmp139 * _tmp91 -
                         _tmp146 * _tmp147 - _tmp147 * _tmp148;
  const Scalar _tmp150 = Scalar(1.0) / (_tmp149);
  const Scalar _tmp151 = std::asinh(
      _tmp150 * (_tmp102 * _tmp103 + _tmp118 * _tmp144 * _tmp62 + _tmp125 * _tmp126 * _tmp144 +
                 _tmp130 * _tmp131 * _tmp51 - _tmp133 * _tmp145 + _tmp58 * _tmp64));
  const Scalar _tmp152 = Scalar(9.6622558468725703) * _tmp149;
  const Scalar _tmp153 = _tmp120 * _tmp137 + _tmp124 * _tmp127 + _tmp146 + _tmp148;
  const Scalar _tmp154 = Scalar(1.0) / (_tmp153);
  const Scalar _tmp155 = std::asinh(_tmp154 * (_tmp103 * _tmp66 - _tmp115 * _tmp120 * _tmp55 -
                                               _tmp123 * _tmp127 * _tmp55 - _tmp128 * _tmp131 +
                                               _tmp145 - _tmp57 * _tmp64));
  const Scalar _tmp156 = Scalar(9.6622558468725703) * _tmp153;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      -_tmp32 *
          (Scalar(0.86625939559540499) * _tmp0 + std::cosh(Scalar(1.0) * _tmp31) -
           std::cosh(
               Scalar(0.1034955) * _tmp0 *
               (-_tmp31 * _tmp32 -
                Scalar(4.8333311099999996) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(1 - Scalar(0.20689664689659551) * _tmp30), Scalar(2)) +
                        Scalar(0.13817235445745474) *
                            std::pow(Scalar(-Scalar(0.55659957866191134) * _tmp20 - 1),
                                     Scalar(2))))))) +
      _tmp38 + p_init2;
  _res(1, 0) =
      -_tmp143 *
          (Scalar(0.87679799772039002) * _tmp141 + std::cosh(Scalar(1.0) * _tmp142) -
           std::cosh(
               Scalar(0.1034955) * _tmp141 *
               (-_tmp142 * _tmp143 -
                Scalar(8.3196563700000006) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(-Scalar(0.12019727204189803) * _tmp77 - 1), Scalar(2)) +
                        Scalar(0.057067943376852184) *
                            std::pow(Scalar(-Scalar(0.50315118556004401) * _tmp79 - 1),
                                     Scalar(2))))))) +
      _tmp92 + p_init2;
  _res(2, 0) =
      -_tmp152 *
          (Scalar(0.86565325453551001) * _tmp150 + std::cosh(Scalar(1.0) * _tmp151) -
           std::cosh(
               Scalar(0.1034955) * _tmp150 *
               (-_tmp151 * _tmp152 -
                Scalar(4.7752063900000001) *
                    std::sqrt(Scalar(
                        Scalar(0.32397683292140877) *
                            std::pow(Scalar(1 - Scalar(0.36791786395571047) * _tmp84), Scalar(2)) +
                        std::pow(Scalar(1 - Scalar(0.20941503221602112) * _tmp86), Scalar(2))))))) +
      _tmp93 + p_init2;
  _res(3, 0) =
      -_tmp156 *
          (Scalar(0.87653584775870996) * _tmp154 + std::cosh(Scalar(1.0) * _tmp155) -
           std::cosh(
               Scalar(0.1034955) * _tmp154 *
               (-_tmp155 * _tmp156 -
                Scalar(8.3888750099999996) *
                    std::sqrt(Scalar(
                        Scalar(0.090254729040973036) *
                            std::pow(Scalar(1 - Scalar(0.39679052492160538) * _tmp70), Scalar(2)) +
                        std::pow(Scalar(-Scalar(0.11920549523123722) * _tmp72 - 1),
                                 Scalar(2))))))) +
      _tmp69 + p_init2;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
