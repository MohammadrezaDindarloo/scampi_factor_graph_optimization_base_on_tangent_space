// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost1_Nl2
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     p_init0: Scalar
 *     p_init1: Scalar
 *     p_init2: Scalar
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost1Nl2(const Scalar fh1, const Scalar fv1,
                                                   const sym::Rot3<Scalar>& DeltaRot,
                                                   const Scalar p_init0, const Scalar p_init1,
                                                   const Scalar p_init2, const Scalar rot_init_x,
                                                   const Scalar rot_init_y, const Scalar rot_init_z,
                                                   const Scalar rot_init_w, const Scalar epsilon) {
  // Total ops: 500

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (151)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp3 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp5 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp5;
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp9 = 2 * _tmp2;
  const Scalar _tmp10 = _tmp8 * _tmp9;
  const Scalar _tmp11 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                        2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp12 = _tmp11 * _tmp4;
  const Scalar _tmp13 = _tmp10 + _tmp12;
  const Scalar _tmp14 = -Scalar(0.010999999999999999) * _tmp13;
  const Scalar _tmp15 = 2 * _tmp4 * _tmp8;
  const Scalar _tmp16 = _tmp11 * _tmp2;
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp15 - Scalar(0.20999999999999999) * _tmp16;
  const Scalar _tmp18 = _tmp14 - _tmp17;
  const Scalar _tmp19 = _tmp18 + _tmp7;
  const Scalar _tmp20 = _tmp19 + p_init0;
  const Scalar _tmp21 = -2 * std::pow(_tmp8, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp3 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp15 + Scalar(0.20999999999999999) * _tmp16;
  const Scalar _tmp25 = _tmp4 * _tmp9;
  const Scalar _tmp26 = _tmp11 * _tmp8;
  const Scalar _tmp27 = _tmp25 - _tmp26;
  const Scalar _tmp28 = -Scalar(0.010999999999999999) * _tmp27;
  const Scalar _tmp29 = -_tmp24 + _tmp28;
  const Scalar _tmp30 = _tmp23 + _tmp29;
  const Scalar _tmp31 = _tmp30 + p_init1;
  const Scalar _tmp32 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp33 = Scalar(0.20999999999999999) * _tmp10 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 =
      -Scalar(0.010999999999999999) * _tmp21 - Scalar(0.010999999999999999) * _tmp5;
  const Scalar _tmp36 = Scalar(0.20999999999999999) * _tmp25 + Scalar(0.20999999999999999) * _tmp26;
  const Scalar _tmp37 = _tmp35 - _tmp36;
  const Scalar _tmp38 = _tmp34 + _tmp37;
  const Scalar _tmp39 = _tmp18 + _tmp6;
  const Scalar _tmp40 = _tmp39 + p_init0;
  const Scalar _tmp41 = _tmp40 + Scalar(-2.5202214700000001);
  const Scalar _tmp42 = _tmp24 + _tmp28;
  const Scalar _tmp43 = _tmp23 + _tmp42;
  const Scalar _tmp44 = _tmp43 + p_init1;
  const Scalar _tmp45 = _tmp44 + Scalar(8.3888750099999996);
  const Scalar _tmp46 = std::pow(Scalar(std::pow(_tmp41, Scalar(2)) + std::pow(_tmp45, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp47 = _tmp45 * _tmp46;
  const Scalar _tmp48 = _tmp14 + _tmp17;
  const Scalar _tmp49 = _tmp48 + _tmp6;
  const Scalar _tmp50 = _tmp49 + p_init0;
  const Scalar _tmp51 = _tmp50 + Scalar(-2.71799795);
  const Scalar _tmp52 = Scalar(1.0) / (_tmp51);
  const Scalar _tmp53 = _tmp22 + _tmp42;
  const Scalar _tmp54 = _tmp53 + p_init1;
  const Scalar _tmp55 = _tmp54 + Scalar(-4.7752063900000001);
  const Scalar _tmp56 = _tmp52 * _tmp55;
  const Scalar _tmp57 = _tmp41 * _tmp46;
  const Scalar _tmp58 = Scalar(1.0) / (-_tmp47 + _tmp56 * _tmp57);
  const Scalar _tmp59 = _tmp33 + _tmp37;
  const Scalar _tmp60 = _tmp35 + _tmp36;
  const Scalar _tmp61 = _tmp33 + _tmp60;
  const Scalar _tmp62 = _tmp56 * _tmp61;
  const Scalar _tmp63 = _tmp58 * (_tmp47 * _tmp59 - _tmp57 * _tmp62);
  const Scalar _tmp64 = _tmp22 + _tmp29;
  const Scalar _tmp65 = _tmp64 + p_init1;
  const Scalar _tmp66 = _tmp65 + Scalar(-4.8333311099999996);
  const Scalar _tmp67 = _tmp48 + _tmp7;
  const Scalar _tmp68 = _tmp67 + p_init0;
  const Scalar _tmp69 = _tmp68 + Scalar(1.79662371);
  const Scalar _tmp70 = std::pow(Scalar(std::pow(_tmp66, Scalar(2)) + std::pow(_tmp69, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = _tmp69 * _tmp70;
  const Scalar _tmp72 = _tmp34 + _tmp60;
  const Scalar _tmp73 = _tmp66 * _tmp70;
  const Scalar _tmp74 = _tmp56 * _tmp71 - _tmp73;
  const Scalar _tmp75 = -_tmp62 * _tmp71 - _tmp63 * _tmp74 + _tmp72 * _tmp73;
  const Scalar _tmp76 = _tmp58 * (-_tmp57 * _tmp59 + _tmp57 * _tmp61);
  const Scalar _tmp77 = Scalar(1.0) * _tmp53;
  const Scalar _tmp78 = -_tmp77;
  const Scalar _tmp79 = Scalar(1.0) / (_tmp43 + _tmp78);
  const Scalar _tmp80 = Scalar(1.0) * _tmp49;
  const Scalar _tmp81 = -_tmp39 + _tmp80;
  const Scalar _tmp82 = _tmp79 * _tmp81;
  const Scalar _tmp83 = _tmp61 * _tmp71 - _tmp71 * _tmp72 - _tmp74 * _tmp76 - _tmp75 * _tmp82;
  const Scalar _tmp84 = Scalar(1.0) / (_tmp83);
  const Scalar _tmp85 = Scalar(1.0) * _tmp79;
  const Scalar _tmp86 = _tmp63 * _tmp81 * _tmp85 - Scalar(1.0) * _tmp76;
  const Scalar _tmp87 =
      std::sqrt(Scalar(std::pow(_tmp51, Scalar(2)) + std::pow(_tmp55, Scalar(2))));
  const Scalar _tmp88 = Scalar(1.0) / (_tmp87);
  const Scalar _tmp89 = _tmp52 * _tmp87;
  const Scalar _tmp90 = _tmp89 * (_tmp49 * _tmp55 * _tmp88 - _tmp51 * _tmp53 * _tmp88);
  const Scalar _tmp91 = _tmp58 * (-_tmp39 * _tmp47 + _tmp43 * _tmp57 + _tmp57 * _tmp90);
  const Scalar _tmp92 = _tmp64 * _tmp71 - _tmp67 * _tmp73 + _tmp71 * _tmp90 - _tmp74 * _tmp91;
  const Scalar _tmp93 = _tmp84 * _tmp92;
  const Scalar _tmp94 = Scalar(1.0) / (_tmp92);
  const Scalar _tmp95 = _tmp83 * _tmp94;
  const Scalar _tmp96 = _tmp95 * (-_tmp86 * _tmp93 - Scalar(1.0) * _tmp91);
  const Scalar _tmp97 = _tmp84 * (_tmp86 + _tmp96);
  const Scalar _tmp98 = _tmp64 + _tmp78;
  const Scalar _tmp99 = _tmp82 * _tmp98;
  const Scalar _tmp100 = Scalar(1.0) / (-_tmp67 + _tmp80 - _tmp99);
  const Scalar _tmp101 = _tmp100 * _tmp98;
  const Scalar _tmp102 = _tmp101 * _tmp96 - Scalar(1.0) * _tmp63 - _tmp75 * _tmp97;
  const Scalar _tmp103 = Scalar(1.0) * _tmp100;
  const Scalar _tmp104 = _tmp31 + Scalar(8.3196563700000006);
  const Scalar _tmp105 = _tmp20 + Scalar(1.9874742000000001);
  const Scalar _tmp106 =
      std::pow(Scalar(std::pow(_tmp104, Scalar(2)) + std::pow(_tmp105, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp107 = _tmp104 * _tmp106;
  const Scalar _tmp108 = _tmp107 * fh1;
  const Scalar _tmp109 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp110 = _tmp77 * _tmp82 + _tmp80;
  const Scalar _tmp111 = 0;
  const Scalar _tmp112 = _tmp100 * _tmp110;
  const Scalar _tmp113 = -_tmp111 * _tmp75 - _tmp112 * _tmp98 + _tmp78;
  const Scalar _tmp114 = _tmp105 * _tmp106;
  const Scalar _tmp115 = _tmp38 * fh1;
  const Scalar _tmp116 = _tmp114 * _tmp115 + Scalar(3.29616) * _tmp13 + _tmp19 * fv1;
  const Scalar _tmp117 = _tmp79 * _tmp98;
  const Scalar _tmp118 = Scalar(1.0) * _tmp94;
  const Scalar _tmp119 = _tmp103 * _tmp95;
  const Scalar _tmp120 = -_tmp118 * _tmp75 + _tmp119 * _tmp98;
  const Scalar _tmp121 = fh1 * (_tmp107 * _tmp19 - _tmp114 * _tmp30);
  const Scalar _tmp122 = _tmp56 * _tmp63 + _tmp62;
  const Scalar _tmp123 = -_tmp122 * _tmp82 + _tmp56 * _tmp76 - _tmp61;
  const Scalar _tmp124 = _tmp95 * (-_tmp123 * _tmp93 + _tmp56 * _tmp91 - _tmp90);
  const Scalar _tmp125 = _tmp84 * (_tmp123 + _tmp124);
  const Scalar _tmp126 = _tmp101 * _tmp124 + _tmp122 - _tmp125 * _tmp75;
  const Scalar _tmp127 = _tmp114 * fh1;
  const Scalar _tmp128 = -_tmp107 * _tmp115 - Scalar(3.29616) * _tmp27 - _tmp30 * fv1;
  const Scalar _tmp129 = _tmp103 * _tmp99 + Scalar(1.0);
  const Scalar _tmp130 = _tmp103 * _tmp82;
  const Scalar _tmp131 = _tmp57 * _tmp58;
  const Scalar _tmp132 = _tmp131 * _tmp74;
  const Scalar _tmp133 = -_tmp74 * _tmp97 + Scalar(1.0);
  const Scalar _tmp134 = -_tmp125 * _tmp74 - _tmp56;
  const Scalar _tmp135 = -_tmp108 * _tmp89 * (_tmp131 * _tmp133 + _tmp71 * _tmp97) -
                         _tmp109 * _tmp89 * (-_tmp111 * _tmp132 + _tmp111 * _tmp71) -
                         _tmp121 * _tmp89 * (-_tmp118 * _tmp132 + _tmp118 * _tmp71) -
                         _tmp127 * _tmp89 * (_tmp125 * _tmp71 + _tmp131 * _tmp134 + Scalar(1.0));
  const Scalar _tmp136 = Scalar(1.0) / (_tmp135);
  const Scalar _tmp137 = std::asinh(
      _tmp136 * (Scalar(1.0) * _tmp108 * (-_tmp102 * _tmp85 + _tmp103 * _tmp96) +
                 Scalar(1.0) * _tmp109 * (-_tmp103 * _tmp110 - _tmp113 * _tmp85 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp116 * (_tmp103 * _tmp117 - _tmp103) +
                 Scalar(1.0) * _tmp121 * (_tmp119 - _tmp120 * _tmp85) +
                 Scalar(1.0) * _tmp127 * (_tmp103 * _tmp124 - _tmp126 * _tmp85) +
                 Scalar(1.0) * _tmp128 * (-_tmp129 * _tmp85 + _tmp130)));
  const Scalar _tmp138 = Scalar(9.6622558468725703) * _tmp135;
  const Scalar _tmp139 = _tmp118 * _tmp121;
  const Scalar _tmp140 = _tmp58 * _tmp74;
  const Scalar _tmp141 = _tmp109 * _tmp111;
  const Scalar _tmp142 = _tmp108 * _tmp133 * _tmp58 + _tmp127 * _tmp134 * _tmp58 -
                         _tmp139 * _tmp140 - _tmp140 * _tmp141;
  const Scalar _tmp143 = Scalar(1.0) / (_tmp142);
  const Scalar _tmp144 = _tmp103 * _tmp116;
  const Scalar _tmp145 =
      std::asinh(_tmp143 * (_tmp102 * _tmp108 * _tmp79 + _tmp109 * _tmp113 * _tmp79 -
                            _tmp117 * _tmp144 + _tmp120 * _tmp121 * _tmp79 +
                            _tmp126 * _tmp127 * _tmp79 + _tmp128 * _tmp129 * _tmp79));
  const Scalar _tmp146 = Scalar(9.6622558468725703) * _tmp142;
  const Scalar _tmp147 = _tmp108 * _tmp97 + _tmp125 * _tmp127 + _tmp139 + _tmp141;
  const Scalar _tmp148 = Scalar(1.0) / (_tmp147);
  const Scalar _tmp149 =
      std::asinh(_tmp148 * (-_tmp100 * _tmp108 * _tmp96 - _tmp100 * _tmp124 * _tmp127 +
                            _tmp109 * _tmp112 - _tmp119 * _tmp121 - _tmp128 * _tmp130 + _tmp144));
  const Scalar _tmp150 = Scalar(9.6622558468725703) * _tmp147;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      -_tmp32 *
          (Scalar(0.87679799772039002) * _tmp0 + std::cosh(Scalar(1.0) * _tmp1) -
           std::cosh(
               Scalar(0.1034955) * _tmp0 *
               (-_tmp1 * _tmp32 -
                Scalar(8.3196563700000006) *
                    std::sqrt(Scalar(
                        Scalar(0.057067943376852184) *
                            std::pow(Scalar(-Scalar(0.50315118556004401) * _tmp20 - 1), Scalar(2)) +
                        std::pow(Scalar(-Scalar(0.12019727204189803) * _tmp31 - 1),
                                 Scalar(2))))))) +
      _tmp38 + p_init2;
  _res(1, 0) =
      -_tmp138 *
          (Scalar(0.86565325453551001) * _tmp136 + std::cosh(Scalar(1.0) * _tmp137) -
           std::cosh(
               Scalar(0.1034955) * _tmp136 *
               (-_tmp137 * _tmp138 -
                Scalar(4.7752063900000001) *
                    std::sqrt(Scalar(
                        Scalar(0.32397683292140877) *
                            std::pow(Scalar(1 - Scalar(0.36791786395571047) * _tmp50), Scalar(2)) +
                        std::pow(Scalar(1 - Scalar(0.20941503221602112) * _tmp54), Scalar(2))))))) +
      _tmp61 + p_init2;
  _res(2, 0) =
      -_tmp146 *
          (Scalar(0.87653584775870996) * _tmp143 + std::cosh(Scalar(1.0) * _tmp145) -
           std::cosh(
               Scalar(0.1034955) * _tmp143 *
               (-_tmp145 * _tmp146 -
                Scalar(8.3888750099999996) *
                    std::sqrt(Scalar(
                        Scalar(0.090254729040973036) *
                            std::pow(Scalar(1 - Scalar(0.39679052492160538) * _tmp40), Scalar(2)) +
                        std::pow(Scalar(-Scalar(0.11920549523123722) * _tmp44 - 1),
                                 Scalar(2))))))) +
      _tmp59 + p_init2;
  _res(3, 0) =
      -_tmp150 *
          (Scalar(0.86625939559540499) * _tmp148 + std::cosh(Scalar(1.0) * _tmp149) -
           std::cosh(
               Scalar(0.1034955) * _tmp148 *
               (-_tmp149 * _tmp150 -
                Scalar(4.8333311099999996) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(1 - Scalar(0.20689664689659551) * _tmp65), Scalar(2)) +
                        Scalar(0.13817235445745474) *
                            std::pow(Scalar(-Scalar(0.55659957866191134) * _tmp68 - 1),
                                     Scalar(2))))))) +
      _tmp72 + p_init2;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
