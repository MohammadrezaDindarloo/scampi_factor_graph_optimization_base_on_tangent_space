// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_Nl18
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost3Nl18(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 283

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (102)
  const Scalar _tmp0 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp2 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp4 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp4 +
                       Scalar(0.20999999999999999);
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp8 = 2 * _tmp3;
  const Scalar _tmp9 = _tmp7 * _tmp8;
  const Scalar _tmp10 = -_DeltaRot[0] * _Rot_init[0] - _DeltaRot[1] * _Rot_init[1] -
                        _DeltaRot[2] * _Rot_init[2] + _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp11 = 2 * _tmp1 * _tmp10;
  const Scalar _tmp12 =
      Scalar(0.010999999999999999) * _tmp11 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp13 = 2 * _tmp7;
  const Scalar _tmp14 = _tmp1 * _tmp13;
  const Scalar _tmp15 = _tmp10 * _tmp8;
  const Scalar _tmp16 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp17 = _tmp12 - _tmp16;
  const Scalar _tmp18 = _tmp17 + _tmp6;
  const Scalar _tmp19 = _tmp18 + position_vector(1, 0) + Scalar(8.3196563700000006);
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp14 - Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = 1 - 2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp24 = _tmp1 * _tmp8;
  const Scalar _tmp25 = _tmp10 * _tmp13;
  const Scalar _tmp26 =
      -Scalar(0.010999999999999999) * _tmp24 - Scalar(0.010999999999999999) * _tmp25;
  const Scalar _tmp27 = -_tmp23 + _tmp26;
  const Scalar _tmp28 = _tmp21 + _tmp27;
  const Scalar _tmp29 = _tmp28 + position_vector(0, 0) + Scalar(1.9874742000000001);
  const Scalar _tmp30 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp31 = _tmp19 * _tmp30;
  const Scalar _tmp32 = _tmp12 + _tmp16;
  const Scalar _tmp33 = _tmp32 + _tmp6;
  const Scalar _tmp34 = _tmp33 + position_vector(1, 0) + Scalar(8.3888750099999996);
  const Scalar _tmp35 = _tmp23 + _tmp26;
  const Scalar _tmp36 = _tmp21 + _tmp35;
  const Scalar _tmp37 = _tmp36 + position_vector(0, 0) + Scalar(-2.5202214700000001);
  const Scalar _tmp38 = std::pow(Scalar(std::pow(_tmp34, Scalar(2)) + std::pow(_tmp37, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp39 = _tmp37 * _tmp38;
  const Scalar _tmp40 = _tmp34 * _tmp38;
  const Scalar _tmp41 = Scalar(1.0) / (_tmp31 * _tmp39 - _tmp40);
  const Scalar _tmp42 = _tmp39 * _tmp41;
  const Scalar _tmp43 = Scalar(1.0) * _tmp18;
  const Scalar _tmp44 = Scalar(1.0) * _tmp28;
  const Scalar _tmp45 = (-_tmp36 + _tmp44) / (_tmp33 - _tmp43);
  const Scalar _tmp46 = _tmp43 * _tmp45 + _tmp44;
  const Scalar _tmp47 = 0;
  const Scalar _tmp48 = _tmp32 + _tmp5;
  const Scalar _tmp49 = _tmp48 + position_vector(1, 0) + Scalar(-4.7752063900000001);
  const Scalar _tmp50 = _tmp20 + _tmp35;
  const Scalar _tmp51 = _tmp50 + position_vector(0, 0) + Scalar(-2.71799795);
  const Scalar _tmp52 = std::pow(Scalar(std::pow(_tmp49, Scalar(2)) + std::pow(_tmp51, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp53 = _tmp49 * _tmp52;
  const Scalar _tmp54 = _tmp51 * _tmp52;
  const Scalar _tmp55 = _tmp31 * _tmp54 - _tmp53;
  const Scalar _tmp56 = Scalar(0.20999999999999999) * _tmp24 - Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp57 =
      -Scalar(0.010999999999999999) * _tmp2 - Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp58 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp59 = _tmp57 - _tmp58;
  const Scalar _tmp60 = -_tmp56 + _tmp59;
  const Scalar _tmp61 = _tmp56 + _tmp59;
  const Scalar _tmp62 = _tmp39 * _tmp60 - _tmp39 * _tmp61;
  const Scalar _tmp63 = _tmp41 * _tmp55;
  const Scalar _tmp64 = _tmp56 + _tmp57 + _tmp58;
  const Scalar _tmp65 = _tmp31 * _tmp60;
  const Scalar _tmp66 = -_tmp39 * _tmp65 + _tmp40 * _tmp61;
  const Scalar _tmp67 = -_tmp45 * (_tmp53 * _tmp64 - _tmp54 * _tmp65 - _tmp63 * _tmp66) +
                        _tmp54 * _tmp60 - _tmp54 * _tmp64 - _tmp62 * _tmp63;
  const Scalar _tmp68 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp69 = _tmp55 * _tmp68;
  const Scalar _tmp70 = _tmp47 * _tmp69;
  const Scalar _tmp71 = _tmp47 * _tmp68;
  const Scalar _tmp72 =
      std::sqrt(Scalar(std::pow(_tmp19, Scalar(2)) + std::pow(_tmp29, Scalar(2))));
  const Scalar _tmp73 = _tmp30 * _tmp72;
  const Scalar _tmp74 = Scalar(1.0) / (_tmp72);
  const Scalar _tmp75 = _tmp73 * (-_tmp18 * _tmp29 * _tmp74 + _tmp19 * _tmp28 * _tmp74);
  const Scalar _tmp76 = _tmp33 * _tmp39 - _tmp36 * _tmp40 + _tmp39 * _tmp75;
  const Scalar _tmp77 = Scalar(1.0) * _tmp41;
  const Scalar _tmp78 = _tmp45 * _tmp66 * _tmp77 - _tmp62 * _tmp77;
  const Scalar _tmp79 = _tmp48 * _tmp54 - _tmp50 * _tmp53 + _tmp54 * _tmp75 - _tmp63 * _tmp76;
  const Scalar _tmp80 = _tmp68 * _tmp79;
  const Scalar _tmp81 = Scalar(1.0) / (_tmp79);
  const Scalar _tmp82 = _tmp67 * _tmp81;
  const Scalar _tmp83 = _tmp78 + _tmp82 * (-_tmp76 * _tmp77 - _tmp78 * _tmp80);
  const Scalar _tmp84 = -_tmp69 * _tmp83 + Scalar(1.0);
  const Scalar _tmp85 = _tmp54 * _tmp68;
  const Scalar _tmp86 = _tmp17 + _tmp5;
  const Scalar _tmp87 = _tmp86 + position_vector(1, 0) + Scalar(-4.8333311099999996);
  const Scalar _tmp88 = _tmp20 + _tmp27;
  const Scalar _tmp89 = _tmp88 + position_vector(0, 0) + Scalar(1.79662371);
  const Scalar _tmp90 = std::pow(Scalar(std::pow(_tmp87, Scalar(2)) + std::pow(_tmp89, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp91 = _tmp87 * _tmp90;
  const Scalar _tmp92 = _tmp91 * fh1;
  const Scalar _tmp93 = _tmp31 * _tmp41;
  const Scalar _tmp94 = -_tmp45 * (_tmp65 + _tmp66 * _tmp93) - _tmp60 + _tmp62 * _tmp93;
  const Scalar _tmp95 = _tmp82 * (-_tmp75 + _tmp76 * _tmp93 - _tmp80 * _tmp94) + _tmp94;
  const Scalar _tmp96 = -_tmp31 - _tmp69 * _tmp95;
  const Scalar _tmp97 = _tmp89 * _tmp90;
  const Scalar _tmp98 = _tmp97 * fh1;
  const Scalar _tmp99 = Scalar(1.0) * _tmp81;
  const Scalar _tmp100 = fh1 * (-_tmp86 * _tmp97 + _tmp88 * _tmp91);
  const Scalar _tmp101 = _tmp100 * _tmp99;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = std::exp(-fh1);
  _res(1, 0) = std::exp(_tmp0 * _tmp73 * (-_tmp42 * _tmp70 + _tmp54 * _tmp71) +
                        _tmp100 * _tmp73 * (-_tmp39 * _tmp63 * _tmp99 + _tmp54 * _tmp99) +
                        _tmp73 * _tmp92 * (_tmp42 * _tmp84 + _tmp83 * _tmp85) +
                        _tmp73 * _tmp98 * (_tmp42 * _tmp96 + _tmp85 * _tmp95 + Scalar(1.0)));
  _res(2, 0) = std::exp(_tmp0 * _tmp41 * _tmp70 + _tmp101 * _tmp63 - _tmp41 * _tmp84 * _tmp92 -
                        _tmp41 * _tmp96 * _tmp98);
  _res(3, 0) =
      std::exp(-_tmp0 * _tmp71 - _tmp101 - _tmp68 * _tmp83 * _tmp92 - _tmp68 * _tmp95 * _tmp98);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
