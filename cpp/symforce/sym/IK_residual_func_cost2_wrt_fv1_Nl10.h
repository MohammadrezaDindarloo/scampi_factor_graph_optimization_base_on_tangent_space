// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost2_wrt_fv1_Nl10
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost2WrtFv1Nl10(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 596

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (189)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = Scalar(1.0) * _tmp0 /
                       std::sqrt(Scalar(1 + std::pow(fv1, Scalar(2)) / std::pow(fh1, Scalar(2))));
  const Scalar _tmp3 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp4 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp6 = 1 - 2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp4 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp10 = 2 * _tmp5;
  const Scalar _tmp11 = _tmp10 * _tmp9;
  const Scalar _tmp12 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                        2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp13 = _tmp12 * _tmp3;
  const Scalar _tmp14 = _tmp11 - _tmp13;
  const Scalar _tmp15 = Scalar(0.010999999999999999) * _tmp14;
  const Scalar _tmp16 = -_tmp15;
  const Scalar _tmp17 = 2 * _tmp3 * _tmp9;
  const Scalar _tmp18 = _tmp12 * _tmp5;
  const Scalar _tmp19 = Scalar(0.20999999999999999) * _tmp17 + Scalar(0.20999999999999999) * _tmp18;
  const Scalar _tmp20 = _tmp16 + _tmp19;
  const Scalar _tmp21 = _tmp20 + _tmp8;
  const Scalar _tmp22 = _tmp21 + position_vector(1, 0);
  const Scalar _tmp23 = -2 * std::pow(_tmp9, Scalar(2));
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp25 = _tmp10 * _tmp3;
  const Scalar _tmp26 = _tmp12 * _tmp9;
  const Scalar _tmp27 = _tmp25 + _tmp26;
  const Scalar _tmp28 = -Scalar(0.010999999999999999) * _tmp27;
  const Scalar _tmp29 = Scalar(0.20999999999999999) * _tmp17 - Scalar(0.20999999999999999) * _tmp18;
  const Scalar _tmp30 = _tmp28 - _tmp29;
  const Scalar _tmp31 = _tmp24 + _tmp30;
  const Scalar _tmp32 = _tmp31 + position_vector(0, 0);
  const Scalar _tmp33 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp34 = _tmp20 + _tmp7;
  const Scalar _tmp35 = _tmp34 + position_vector(1, 0);
  const Scalar _tmp36 = _tmp35 + Scalar(-4.7752063900000001);
  const Scalar _tmp37 = _tmp28 + _tmp29;
  const Scalar _tmp38 = _tmp24 + _tmp37;
  const Scalar _tmp39 = _tmp38 + position_vector(0, 0);
  const Scalar _tmp40 = _tmp39 + Scalar(-2.71799795);
  const Scalar _tmp41 = std::pow(Scalar(std::pow(_tmp36, Scalar(2)) + std::pow(_tmp40, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp42 = _tmp36 * _tmp41;
  const Scalar _tmp43 = -_tmp19;
  const Scalar _tmp44 = _tmp16 + _tmp43;
  const Scalar _tmp45 = _tmp44 + _tmp7;
  const Scalar _tmp46 = _tmp45 + position_vector(1, 0);
  const Scalar _tmp47 = _tmp46 + Scalar(-4.8333311099999996);
  const Scalar _tmp48 = -_tmp24;
  const Scalar _tmp49 = _tmp37 + _tmp48;
  const Scalar _tmp50 = _tmp49 + position_vector(0, 0);
  const Scalar _tmp51 = _tmp50 + Scalar(1.79662371);
  const Scalar _tmp52 = Scalar(1.0) / (_tmp51);
  const Scalar _tmp53 = _tmp47 * _tmp52;
  const Scalar _tmp54 = _tmp40 * _tmp41;
  const Scalar _tmp55 = -_tmp42 + _tmp53 * _tmp54;
  const Scalar _tmp56 = Scalar(0.20999999999999999) * _tmp25 - Scalar(0.20999999999999999) * _tmp26;
  const Scalar _tmp57 = -_tmp56;
  const Scalar _tmp58 = -Scalar(0.010999999999999999) * _tmp23 -
                        Scalar(0.010999999999999999) * _tmp4 + Scalar(-0.010999999999999999);
  const Scalar _tmp59 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp60 = _tmp58 + _tmp59;
  const Scalar _tmp61 = _tmp57 + _tmp60;
  const Scalar _tmp62 = _tmp58 - _tmp59;
  const Scalar _tmp63 = _tmp57 + _tmp62;
  const Scalar _tmp64 = _tmp44 + _tmp8;
  const Scalar _tmp65 = _tmp64 + position_vector(1, 0);
  const Scalar _tmp66 = _tmp65 + Scalar(8.3196563700000006);
  const Scalar _tmp67 = _tmp30 + _tmp48;
  const Scalar _tmp68 = _tmp67 + position_vector(0, 0);
  const Scalar _tmp69 = _tmp68 + Scalar(1.9874742000000001);
  const Scalar _tmp70 = std::pow(Scalar(std::pow(_tmp66, Scalar(2)) + std::pow(_tmp69, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = _tmp66 * _tmp70;
  const Scalar _tmp72 = _tmp69 * _tmp70;
  const Scalar _tmp73 = _tmp53 * _tmp61;
  const Scalar _tmp74 = _tmp63 * _tmp71 - _tmp72 * _tmp73;
  const Scalar _tmp75 = Scalar(1.0) / (_tmp53 * _tmp72 - _tmp71);
  const Scalar _tmp76 = _tmp55 * _tmp75;
  const Scalar _tmp77 = _tmp56 + _tmp60;
  const Scalar _tmp78 = _tmp42 * _tmp77 - _tmp54 * _tmp73 - _tmp74 * _tmp76;
  const Scalar _tmp79 = Scalar(1.0) * _tmp45;
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = Scalar(1.0) / (_tmp64 + _tmp80);
  const Scalar _tmp82 = Scalar(1.0) * _tmp49;
  const Scalar _tmp83 = _tmp81 * (-_tmp67 + _tmp82);
  const Scalar _tmp84 = _tmp61 * _tmp72 - _tmp63 * _tmp72;
  const Scalar _tmp85 = _tmp54 * _tmp61 - _tmp54 * _tmp77 - _tmp76 * _tmp84 - _tmp78 * _tmp83;
  const Scalar _tmp86 = Scalar(1.0) / (_tmp85);
  const Scalar _tmp87 =
      std::sqrt(Scalar(std::pow(_tmp47, Scalar(2)) + std::pow(_tmp51, Scalar(2))));
  const Scalar _tmp88 = Scalar(1.0) / (_tmp87);
  const Scalar _tmp89 = _tmp52 * _tmp87;
  const Scalar _tmp90 = _tmp89 * (-_tmp45 * _tmp51 * _tmp88 + _tmp47 * _tmp49 * _tmp88);
  const Scalar _tmp91 = _tmp64 * _tmp72 - _tmp67 * _tmp71 + _tmp72 * _tmp90;
  const Scalar _tmp92 = Scalar(1.0) * _tmp75;
  const Scalar _tmp93 = _tmp74 * _tmp92;
  const Scalar _tmp94 = _tmp83 * _tmp93 - _tmp84 * _tmp92;
  const Scalar _tmp95 = _tmp34 * _tmp54 - _tmp38 * _tmp42 + _tmp54 * _tmp90 - _tmp76 * _tmp91;
  const Scalar _tmp96 = _tmp86 * _tmp95;
  const Scalar _tmp97 = Scalar(1.0) / (_tmp95);
  const Scalar _tmp98 = _tmp85 * _tmp97;
  const Scalar _tmp99 = _tmp98 * (-_tmp91 * _tmp92 - _tmp94 * _tmp96);
  const Scalar _tmp100 = _tmp86 * (_tmp94 + _tmp99);
  const Scalar _tmp101 = -_tmp100 * _tmp55 + Scalar(1.0);
  const Scalar _tmp102 = _tmp72 * _tmp75;
  const Scalar _tmp103 = _tmp22 + Scalar(8.3888750099999996);
  const Scalar _tmp104 = _tmp32 + Scalar(-2.5202214700000001);
  const Scalar _tmp105 =
      std::pow(Scalar(std::pow(_tmp103, Scalar(2)) + std::pow(_tmp104, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp106 = _tmp103 * _tmp105;
  const Scalar _tmp107 = _tmp106 * fh1;
  const Scalar _tmp108 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp109 = _tmp79 * _tmp83 + _tmp82;
  const Scalar _tmp110 = 0;
  const Scalar _tmp111 = _tmp110 * _tmp76;
  const Scalar _tmp112 = _tmp89 * (_tmp110 * _tmp54 - _tmp111 * _tmp72);
  const Scalar _tmp113 = _tmp55 * _tmp92 * _tmp97;
  const Scalar _tmp114 = Scalar(1.0) * _tmp97;
  const Scalar _tmp115 = _tmp104 * _tmp105;
  const Scalar _tmp116 = fh1 * (_tmp106 * _tmp31 - _tmp115 * _tmp21);
  const Scalar _tmp117 = _tmp53 * _tmp75;
  const Scalar _tmp118 = _tmp117 * _tmp74 + _tmp73;
  const Scalar _tmp119 = _tmp117 * _tmp84 - _tmp118 * _tmp83 - _tmp61;
  const Scalar _tmp120 = _tmp98 * (_tmp117 * _tmp91 - _tmp119 * _tmp96 - _tmp90);
  const Scalar _tmp121 = _tmp86 * (_tmp119 + _tmp120);
  const Scalar _tmp122 = -_tmp121 * _tmp55 - _tmp53;
  const Scalar _tmp123 = _tmp115 * fh1;
  const Scalar _tmp124 = -_tmp107 * _tmp89 * (_tmp100 * _tmp54 + _tmp101 * _tmp102) -
                         _tmp108 * _tmp112 -
                         _tmp116 * _tmp89 * (-_tmp113 * _tmp72 + _tmp114 * _tmp54) -
                         _tmp123 * _tmp89 * (_tmp102 * _tmp122 + _tmp121 * _tmp54 + Scalar(1.0));
  const Scalar _tmp125 = Scalar(1.0) / (_tmp124);
  const Scalar _tmp126 = fh1 * (_tmp56 + _tmp62);
  const Scalar _tmp127 = _tmp115 * _tmp126 + Scalar(5.1796800000000003) * _tmp27 + _tmp31 * fv1;
  const Scalar _tmp128 = _tmp34 + _tmp80;
  const Scalar _tmp129 = _tmp128 * _tmp83;
  const Scalar _tmp130 = Scalar(1.0) / (-_tmp129 - _tmp38 + _tmp82);
  const Scalar _tmp131 = Scalar(1.0) * _tmp130;
  const Scalar _tmp132 = _tmp128 * _tmp81;
  const Scalar _tmp133 = Scalar(1.0) * _tmp131 * _tmp132 - Scalar(1.0) * _tmp131;
  const Scalar _tmp134 = _tmp128 * _tmp130;
  const Scalar _tmp135 = -_tmp100 * _tmp78 + _tmp134 * _tmp99 - _tmp93;
  const Scalar _tmp136 = Scalar(1.0) * _tmp81;
  const Scalar _tmp137 = _tmp109 * _tmp130;
  const Scalar _tmp138 = _tmp81 * (-_tmp110 * _tmp78 - _tmp128 * _tmp137 + _tmp80);
  const Scalar _tmp139 = -Scalar(1.0) * _tmp109 * _tmp131 - Scalar(1.0) * _tmp138 + Scalar(1.0);
  const Scalar _tmp140 = _tmp131 * _tmp98;
  const Scalar _tmp141 = -_tmp114 * _tmp78 + _tmp128 * _tmp140;
  const Scalar _tmp142 = _tmp118 + _tmp120 * _tmp134 - _tmp121 * _tmp78;
  const Scalar _tmp143 = -_tmp106 * _tmp126 - Scalar(5.1796800000000003) * _tmp14 - _tmp21 * fv1;
  const Scalar _tmp144 = _tmp131 * _tmp83;
  const Scalar _tmp145 = _tmp129 * _tmp131 + Scalar(1.0);
  const Scalar _tmp146 = -Scalar(1.0) * _tmp136 * _tmp145 + Scalar(1.0) * _tmp144;
  const Scalar _tmp147 = Scalar(1.0) * _tmp107 * (_tmp131 * _tmp99 - _tmp135 * _tmp136) +
                         _tmp108 * _tmp139 +
                         Scalar(1.0) * _tmp116 * (-_tmp136 * _tmp141 + _tmp140) +
                         Scalar(1.0) * _tmp123 * (_tmp120 * _tmp131 - _tmp136 * _tmp142) +
                         _tmp127 * _tmp133 + _tmp143 * _tmp146;
  const Scalar _tmp148 = std::asinh(_tmp125 * _tmp147);
  const Scalar _tmp149 = Scalar(1.0) * _tmp148;
  const Scalar _tmp150 = Scalar(9.6622558468725703) * _tmp124;
  const Scalar _tmp151 =
      -_tmp148 * _tmp150 -
      Scalar(4.8333311099999996) *
          std::sqrt(
              Scalar(std::pow(Scalar(1 - Scalar(0.20689664689659551) * _tmp46), Scalar(2)) +
                     Scalar(0.13817235445745474) *
                         std::pow(Scalar(-Scalar(0.55659957866191134) * _tmp50 - 1), Scalar(2))));
  const Scalar _tmp152 = Scalar(0.1034955) * _tmp125;
  const Scalar _tmp153 = _tmp151 * _tmp152;
  const Scalar _tmp154 = Scalar(9.6622558468725703) * _tmp112;
  const Scalar _tmp155 = std::pow(_tmp124, Scalar(-2));
  const Scalar _tmp156 = _tmp112 * _tmp155;
  const Scalar _tmp157 = _tmp15 + _tmp43 + _tmp7;
  const Scalar _tmp158 =
      (_tmp125 * (_tmp133 * _tmp31 - _tmp139 + _tmp146 * _tmp157) - _tmp147 * _tmp156) /
      std::sqrt(Scalar(std::pow(_tmp147, Scalar(2)) * _tmp155 + 1));
  const Scalar _tmp159 = _tmp145 * _tmp81;
  const Scalar _tmp160 = _tmp127 * _tmp131;
  const Scalar _tmp161 = _tmp107 * _tmp135 * _tmp81 + _tmp108 * _tmp138 +
                         _tmp116 * _tmp141 * _tmp81 + _tmp123 * _tmp142 * _tmp81 -
                         _tmp132 * _tmp160 + _tmp143 * _tmp159;
  const Scalar _tmp162 = _tmp108 * _tmp110;
  const Scalar _tmp163 = _tmp101 * _tmp107 * _tmp75 - _tmp113 * _tmp116 +
                         _tmp122 * _tmp123 * _tmp75 - _tmp162 * _tmp76;
  const Scalar _tmp164 = Scalar(1.0) / (_tmp163);
  const Scalar _tmp165 = std::asinh(_tmp161 * _tmp164);
  const Scalar _tmp166 = Scalar(9.6622558468725703) * _tmp163;
  const Scalar _tmp167 =
      -_tmp165 * _tmp166 -
      Scalar(8.3196563700000006) *
          std::sqrt(
              Scalar(std::pow(Scalar(-Scalar(0.12019727204189803) * _tmp65 - 1), Scalar(2)) +
                     Scalar(0.057067943376852184) *
                         std::pow(Scalar(-Scalar(0.50315118556004401) * _tmp68 - 1), Scalar(2))));
  const Scalar _tmp168 = Scalar(0.1034955) * _tmp164;
  const Scalar _tmp169 = _tmp167 * _tmp168;
  const Scalar _tmp170 = Scalar(1.0) * _tmp165;
  const Scalar _tmp171 = Scalar(9.6622558468725703) * _tmp110;
  const Scalar _tmp172 = _tmp171 * _tmp76;
  const Scalar _tmp173 = std::pow(_tmp163, Scalar(-2));
  const Scalar _tmp174 = _tmp111 * _tmp173;
  const Scalar _tmp175 = _tmp131 * _tmp31;
  const Scalar _tmp176 =
      (-_tmp161 * _tmp174 + _tmp164 * (-_tmp132 * _tmp175 - _tmp138 + _tmp157 * _tmp159)) /
      std::sqrt(Scalar(std::pow(_tmp161, Scalar(2)) * _tmp173 + 1));
  const Scalar _tmp177 = -_tmp107 * _tmp130 * _tmp99 + _tmp108 * _tmp137 - _tmp116 * _tmp140 -
                         _tmp120 * _tmp123 * _tmp130 - _tmp143 * _tmp144 + _tmp160;
  const Scalar _tmp178 = _tmp100 * _tmp107 + _tmp114 * _tmp116 + _tmp121 * _tmp123 + _tmp162;
  const Scalar _tmp179 = Scalar(1.0) / (_tmp178);
  const Scalar _tmp180 = std::asinh(_tmp177 * _tmp179);
  const Scalar _tmp181 = Scalar(1.0) * _tmp180;
  const Scalar _tmp182 = Scalar(9.6622558468725703) * _tmp178;
  const Scalar _tmp183 =
      -_tmp180 * _tmp182 -
      Scalar(4.7752063900000001) *
          std::sqrt(
              Scalar(std::pow(Scalar(1 - Scalar(0.20941503221602112) * _tmp35), Scalar(2)) +
                     Scalar(0.32397683292140877) *
                         std::pow(Scalar(1 - Scalar(0.36791786395571047) * _tmp39), Scalar(2))));
  const Scalar _tmp184 = Scalar(0.1034955) * _tmp179;
  const Scalar _tmp185 = _tmp183 * _tmp184;
  const Scalar _tmp186 = std::pow(_tmp178, Scalar(-2));
  const Scalar _tmp187 = _tmp110 * _tmp186;
  const Scalar _tmp188 = (_tmp177 * _tmp187 + _tmp179 * (-_tmp137 - _tmp144 * _tmp157 + _tmp175)) /
                         std::sqrt(Scalar(std::pow(_tmp177, Scalar(2)) * _tmp186 + 1));

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp33 *
      (-_tmp2 * std::cosh(Scalar(1.0) * _tmp1) +
       _tmp2 *
           std::cosh(
               Scalar(0.1034955) * _tmp0 *
               (-_tmp1 * _tmp33 -
                Scalar(8.3888750099999996) *
                    std::sqrt(Scalar(
                        Scalar(0.090254729040973036) *
                            std::pow(Scalar(1 - Scalar(0.39679052492160538) * _tmp32), Scalar(2)) +
                        std::pow(Scalar(-Scalar(0.11920549523123722) * _tmp22 - 1), Scalar(2)))))));
  _res(1, 0) = _tmp150 * (-Scalar(1.0) * _tmp158 * std::cosh(_tmp149) -
                          (-Scalar(0.1034955) * _tmp151 * _tmp156 +
                           _tmp152 * (-_tmp148 * _tmp154 - _tmp150 * _tmp158)) *
                              std::cosh(_tmp153)) +
               _tmp154 * (-std::sinh(_tmp149) - std::sinh(_tmp153));
  _res(2, 0) = _tmp166 * (-Scalar(1.0) * _tmp176 * std::cosh(_tmp170) -
                          (-Scalar(0.1034955) * _tmp167 * _tmp174 +
                           _tmp168 * (-_tmp165 * _tmp172 - _tmp166 * _tmp176)) *
                              std::cosh(_tmp169)) +
               _tmp172 * (-std::sinh(_tmp169) - std::sinh(_tmp170));
  _res(3, 0) = -_tmp171 * (-std::sinh(_tmp181) - std::sinh(_tmp185)) +
               _tmp182 * (-Scalar(1.0) * _tmp188 * std::cosh(_tmp181) -
                          (Scalar(0.1034955) * _tmp183 * _tmp187 +
                           _tmp184 * (_tmp171 * _tmp180 - _tmp182 * _tmp188)) *
                              std::cosh(_tmp185));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
