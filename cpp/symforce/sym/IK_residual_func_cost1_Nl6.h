// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost1_Nl6
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost1Nl6(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 500

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (153)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp3 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp5;
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp9 = 2 * _tmp2 * _tmp8;
  const Scalar _tmp10 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                        2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp11 = _tmp10 * _tmp4;
  const Scalar _tmp12 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp13 = 2 * _tmp4;
  const Scalar _tmp14 = _tmp13 * _tmp8;
  const Scalar _tmp15 = _tmp10 * _tmp2;
  const Scalar _tmp16 = _tmp14 - _tmp15;
  const Scalar _tmp17 = -Scalar(0.010999999999999999) * _tmp16;
  const Scalar _tmp18 = _tmp12 + _tmp17;
  const Scalar _tmp19 = _tmp18 + _tmp7;
  const Scalar _tmp20 = _tmp19 + position_vector(1, 0);
  const Scalar _tmp21 = -2 * std::pow(_tmp8, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp5;
  const Scalar _tmp23 = _tmp13 * _tmp2;
  const Scalar _tmp24 = _tmp10 * _tmp8;
  const Scalar _tmp25 = _tmp23 + _tmp24;
  const Scalar _tmp26 = -Scalar(0.010999999999999999) * _tmp25;
  const Scalar _tmp27 = -Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp28 = _tmp26 - _tmp27;
  const Scalar _tmp29 = _tmp22 + _tmp28;
  const Scalar _tmp30 = _tmp29 + position_vector(0, 0);
  const Scalar _tmp31 = Scalar(1.4083112389913199) * fh1;
  const Scalar _tmp32 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp33 = -_tmp32;
  const Scalar _tmp34 = -Scalar(0.010999999999999999) * _tmp21 -
                        Scalar(0.010999999999999999) * _tmp3 + Scalar(-0.010999999999999999);
  const Scalar _tmp35 = Scalar(0.20999999999999999) * _tmp23 - Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp36 = _tmp34 + _tmp35;
  const Scalar _tmp37 = _tmp33 + _tmp36;
  const Scalar _tmp38 = -_tmp22;
  const Scalar _tmp39 = _tmp26 + _tmp27;
  const Scalar _tmp40 = _tmp38 + _tmp39;
  const Scalar _tmp41 = _tmp40 + position_vector(0, 0);
  const Scalar _tmp42 = _tmp41 + Scalar(125.0);
  const Scalar _tmp43 = -_tmp12 + _tmp17;
  const Scalar _tmp44 = _tmp43 + _tmp6;
  const Scalar _tmp45 = _tmp44 + position_vector(1, 0);
  const Scalar _tmp46 = _tmp45 + Scalar(-110.0);
  const Scalar _tmp47 = std::pow(Scalar(std::pow(_tmp42, Scalar(2)) + std::pow(_tmp46, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp48 = _tmp42 * _tmp47;
  const Scalar _tmp49 = _tmp34 - _tmp35;
  const Scalar _tmp50 = _tmp32 + _tmp49;
  const Scalar _tmp51 = _tmp33 + _tmp49;
  const Scalar _tmp52 = _tmp43 + _tmp7;
  const Scalar _tmp53 = _tmp52 + position_vector(1, 0);
  const Scalar _tmp54 = _tmp53 + Scalar(110.0);
  const Scalar _tmp55 = _tmp28 + _tmp38;
  const Scalar _tmp56 = _tmp55 + position_vector(0, 0);
  const Scalar _tmp57 = _tmp56 + Scalar(125.0);
  const Scalar _tmp58 = Scalar(1.0) / (_tmp57);
  const Scalar _tmp59 = _tmp54 * _tmp58;
  const Scalar _tmp60 = _tmp51 * _tmp59;
  const Scalar _tmp61 = _tmp32 + _tmp36;
  const Scalar _tmp62 = _tmp18 + _tmp6;
  const Scalar _tmp63 = _tmp62 + position_vector(1, 0);
  const Scalar _tmp64 = _tmp63 + Scalar(-110.0);
  const Scalar _tmp65 = _tmp22 + _tmp39;
  const Scalar _tmp66 = _tmp65 + position_vector(0, 0);
  const Scalar _tmp67 = _tmp66 + Scalar(-125.0);
  const Scalar _tmp68 = std::pow(Scalar(std::pow(_tmp64, Scalar(2)) + std::pow(_tmp67, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp69 = _tmp64 * _tmp68;
  const Scalar _tmp70 = _tmp67 * _tmp68;
  const Scalar _tmp71 = -_tmp60 * _tmp70 + _tmp61 * _tmp69;
  const Scalar _tmp72 = Scalar(1.0) / (_tmp59 * _tmp70 - _tmp69);
  const Scalar _tmp73 = _tmp46 * _tmp47;
  const Scalar _tmp74 = _tmp48 * _tmp59 - _tmp73;
  const Scalar _tmp75 = _tmp72 * _tmp74;
  const Scalar _tmp76 = -_tmp48 * _tmp60 + _tmp50 * _tmp73 - _tmp71 * _tmp75;
  const Scalar _tmp77 = Scalar(1.0) * _tmp55;
  const Scalar _tmp78 = Scalar(1.0) * _tmp52;
  const Scalar _tmp79 = -_tmp78;
  const Scalar _tmp80 = Scalar(1.0) / (_tmp62 + _tmp79);
  const Scalar _tmp81 = _tmp80 * (-_tmp65 + _tmp77);
  const Scalar _tmp82 = _tmp51 * _tmp70 - _tmp61 * _tmp70;
  const Scalar _tmp83 = -_tmp48 * _tmp50 + _tmp48 * _tmp51 - _tmp75 * _tmp82 - _tmp76 * _tmp81;
  const Scalar _tmp84 = Scalar(1.0) / (_tmp83);
  const Scalar _tmp85 = Scalar(1.0) * _tmp72;
  const Scalar _tmp86 = _tmp71 * _tmp85;
  const Scalar _tmp87 = _tmp81 * _tmp86 - _tmp82 * _tmp85;
  const Scalar _tmp88 =
      std::sqrt(Scalar(std::pow(_tmp54, Scalar(2)) + std::pow(_tmp57, Scalar(2))));
  const Scalar _tmp89 = Scalar(1.0) / (_tmp88);
  const Scalar _tmp90 = _tmp58 * _tmp88;
  const Scalar _tmp91 = _tmp90 * (-_tmp52 * _tmp57 * _tmp89 + _tmp54 * _tmp55 * _tmp89);
  const Scalar _tmp92 = _tmp72 * (_tmp62 * _tmp70 - _tmp65 * _tmp69 + _tmp70 * _tmp91);
  const Scalar _tmp93 = -_tmp40 * _tmp73 + _tmp44 * _tmp48 + _tmp48 * _tmp91 - _tmp74 * _tmp92;
  const Scalar _tmp94 = _tmp84 * _tmp93;
  const Scalar _tmp95 = Scalar(1.0) / (_tmp93);
  const Scalar _tmp96 = _tmp83 * _tmp95;
  const Scalar _tmp97 = _tmp96 * (-_tmp87 * _tmp94 - Scalar(1.0) * _tmp92);
  const Scalar _tmp98 = _tmp84 * (_tmp87 + _tmp97);
  const Scalar _tmp99 = -_tmp74 * _tmp98 + Scalar(1.0);
  const Scalar _tmp100 = _tmp70 * _tmp72;
  const Scalar _tmp101 = _tmp20 + Scalar(110.0);
  const Scalar _tmp102 = _tmp30 + Scalar(-125.0);
  const Scalar _tmp103 =
      std::pow(Scalar(std::pow(_tmp101, Scalar(2)) + std::pow(_tmp102, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp104 = _tmp101 * _tmp103;
  const Scalar _tmp105 = _tmp104 * fh1;
  const Scalar _tmp106 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp107 = _tmp77 + _tmp78 * _tmp81;
  const Scalar _tmp108 = 0;
  const Scalar _tmp109 = _tmp70 * _tmp75;
  const Scalar _tmp110 = Scalar(1.0) * _tmp95;
  const Scalar _tmp111 = _tmp102 * _tmp103;
  const Scalar _tmp112 = fh1 * (_tmp104 * _tmp29 - _tmp111 * _tmp19);
  const Scalar _tmp113 = _tmp59 * _tmp72;
  const Scalar _tmp114 = _tmp113 * _tmp71 + _tmp60;
  const Scalar _tmp115 = _tmp113 * _tmp82 - _tmp114 * _tmp81 - _tmp51;
  const Scalar _tmp116 = _tmp96 * (-_tmp115 * _tmp94 + _tmp59 * _tmp92 - _tmp91);
  const Scalar _tmp117 = _tmp84 * (_tmp115 + _tmp116);
  const Scalar _tmp118 = -_tmp117 * _tmp74 - _tmp59;
  const Scalar _tmp119 = _tmp111 * fh1;
  const Scalar _tmp120 = -_tmp105 * _tmp90 * (_tmp100 * _tmp99 + _tmp48 * _tmp98) -
                         _tmp106 * _tmp90 * (-_tmp108 * _tmp109 + _tmp108 * _tmp48) -
                         _tmp112 * _tmp90 * (-_tmp109 * _tmp110 + _tmp110 * _tmp48) -
                         _tmp119 * _tmp90 * (_tmp100 * _tmp118 + _tmp117 * _tmp48 + Scalar(1.0));
  const Scalar _tmp121 = Scalar(1.0) / (_tmp120);
  const Scalar _tmp122 = _tmp44 + _tmp79;
  const Scalar _tmp123 = _tmp122 * _tmp81;
  const Scalar _tmp124 = Scalar(1.0) / (-_tmp123 - _tmp40 + _tmp77);
  const Scalar _tmp125 = Scalar(1.0) * _tmp124;
  const Scalar _tmp126 = _tmp123 * _tmp125 + Scalar(1.0);
  const Scalar _tmp127 = Scalar(1.0) * _tmp80;
  const Scalar _tmp128 = _tmp125 * _tmp81;
  const Scalar _tmp129 = _tmp37 * fh1;
  const Scalar _tmp130 = -_tmp104 * _tmp129 - Scalar(40.024799999999999) * _tmp16 - _tmp19 * fv1;
  const Scalar _tmp131 = _tmp122 * _tmp124;
  const Scalar _tmp132 = _tmp114 + _tmp116 * _tmp131 - _tmp117 * _tmp76;
  const Scalar _tmp133 = _tmp122 * _tmp125;
  const Scalar _tmp134 = _tmp111 * _tmp129 + Scalar(40.024799999999999) * _tmp25 + _tmp29 * fv1;
  const Scalar _tmp135 = _tmp107 * _tmp124;
  const Scalar _tmp136 = -_tmp108 * _tmp76 - _tmp122 * _tmp135 + _tmp79;
  const Scalar _tmp137 = -_tmp110 * _tmp76 + _tmp133 * _tmp96;
  const Scalar _tmp138 = _tmp125 * _tmp96;
  const Scalar _tmp139 = _tmp131 * _tmp97 - _tmp76 * _tmp98 - _tmp86;
  const Scalar _tmp140 = std::asinh(
      _tmp121 * (Scalar(1.0) * _tmp105 * (_tmp125 * _tmp97 - _tmp127 * _tmp139) +
                 Scalar(1.0) * _tmp106 * (-_tmp107 * _tmp125 - _tmp127 * _tmp136 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp112 * (-_tmp127 * _tmp137 + _tmp138) +
                 Scalar(1.0) * _tmp119 * (_tmp116 * _tmp125 - _tmp127 * _tmp132) +
                 Scalar(1.0) * _tmp130 * (-_tmp126 * _tmp127 + _tmp128) +
                 Scalar(1.0) * _tmp134 * (-_tmp125 + _tmp133 * _tmp80)));
  const Scalar _tmp141 = Scalar(1.4083112389913199) * _tmp120;
  const Scalar _tmp142 = _tmp125 * _tmp134;
  const Scalar _tmp143 = _tmp110 * _tmp112;
  const Scalar _tmp144 = _tmp106 * _tmp108;
  const Scalar _tmp145 =
      _tmp105 * _tmp72 * _tmp99 + _tmp118 * _tmp119 * _tmp72 - _tmp143 * _tmp75 - _tmp144 * _tmp75;
  const Scalar _tmp146 = Scalar(1.0) / (_tmp145);
  const Scalar _tmp147 =
      std::asinh(_tmp146 * (_tmp105 * _tmp139 * _tmp80 + _tmp106 * _tmp136 * _tmp80 +
                            _tmp112 * _tmp137 * _tmp80 + _tmp119 * _tmp132 * _tmp80 -
                            _tmp122 * _tmp142 * _tmp80 + _tmp126 * _tmp130 * _tmp80));
  const Scalar _tmp148 = Scalar(1.4083112389913199) * _tmp145;
  const Scalar _tmp149 = _tmp105 * _tmp98 + _tmp117 * _tmp119 + _tmp143 + _tmp144;
  const Scalar _tmp150 = Scalar(1.0) / (_tmp149);
  const Scalar _tmp151 =
      std::asinh(_tmp150 * (-_tmp105 * _tmp124 * _tmp97 + _tmp106 * _tmp135 - _tmp112 * _tmp138 -
                            _tmp116 * _tmp119 * _tmp124 - _tmp128 * _tmp130 + _tmp142));
  const Scalar _tmp152 = Scalar(1.4083112389913199) * _tmp149;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      -_tmp31 *
          (Scalar(34.083374946563197) * _tmp0 + std::cosh(Scalar(1.0) * _tmp1) -
           std::cosh(
               Scalar(0.71007031138673404) * _tmp0 *
               (-_tmp1 * _tmp31 -
                Scalar(125.0) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(1 - Scalar(0.0080000000000000002) * _tmp30), Scalar(2)) +
                        Scalar(0.77439999999999998) *
                            std::pow(Scalar(-Scalar(0.0090909090909090905) * _tmp20 - 1),
                                     Scalar(2))))))) +
      _tmp37 + position_vector(2, 0);
  _res(1, 0) =
      -_tmp141 *
          (Scalar(34.083374946563197) * _tmp121 + std::cosh(Scalar(1.0) * _tmp140) -
           std::cosh(Scalar(0.71007031138673404) * _tmp121 *
                     (-_tmp140 * _tmp141 -
                      Scalar(125.0) *
                          std::sqrt(Scalar(
                              Scalar(0.77439999999999998) *
                                  std::pow(Scalar(-Scalar(0.0090909090909090905) * _tmp53 - 1),
                                           Scalar(2)) +
                              std::pow(Scalar(-Scalar(0.0080000000000000002) * _tmp56 - 1),
                                       Scalar(2))))))) +
      _tmp51 + position_vector(2, 0);
  _res(2, 0) =
      -_tmp148 *
          (Scalar(34.083374946563197) * _tmp146 + std::cosh(Scalar(1.0) * _tmp147) -
           std::cosh(
               Scalar(0.71007031138673404) * _tmp146 *
               (-_tmp147 * _tmp148 -
                Scalar(125.0) * std::sqrt(Scalar(
                                    Scalar(0.77439999999999998) *
                                        std::pow(Scalar(1 - Scalar(0.0090909090909090905) * _tmp63),
                                                 Scalar(2)) +
                                    std::pow(Scalar(1 - Scalar(0.0080000000000000002) * _tmp66),
                                             Scalar(2))))))) +
      _tmp61 + position_vector(2, 0);
  _res(3, 0) =
      -_tmp152 *
          (Scalar(34.083374946563197) * _tmp150 + std::cosh(Scalar(1.0) * _tmp151) -
           std::cosh(
               Scalar(0.71007031138673404) * _tmp150 *
               (-_tmp151 * _tmp152 -
                Scalar(125.0) * std::sqrt(Scalar(
                                    Scalar(0.77439999999999998) *
                                        std::pow(Scalar(1 - Scalar(0.0090909090909090905) * _tmp45),
                                                 Scalar(2)) +
                                    std::pow(Scalar(-Scalar(0.0080000000000000002) * _tmp41 - 1),
                                             Scalar(2))))))) +
      _tmp50 + position_vector(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
