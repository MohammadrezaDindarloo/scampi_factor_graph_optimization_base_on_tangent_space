// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost1_Nl14
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost1Nl14(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 508

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (154)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp3 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp4 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = _tmp3 * _tmp5;
  const Scalar _tmp7 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp8 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = _tmp7 * _tmp8;
  const Scalar _tmp10 = Scalar(0.20999999999999999) * _tmp6 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp3 * _tmp7;
  const Scalar _tmp12 = _tmp4 * _tmp8;
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = -Scalar(0.010999999999999999) * _tmp13;
  const Scalar _tmp15 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp16 = 1 - 2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp15 + Scalar(0.20999999999999999) * _tmp16;
  const Scalar _tmp18 = _tmp14 + _tmp17;
  const Scalar _tmp19 = _tmp10 + _tmp18;
  const Scalar _tmp20 = _tmp19 + position_vector(0, 0);
  const Scalar _tmp21 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp6 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp24 = _tmp5 * _tmp7;
  const Scalar _tmp25 = _tmp3 * _tmp8;
  const Scalar _tmp26 = _tmp24 - _tmp25;
  const Scalar _tmp27 = -Scalar(0.010999999999999999) * _tmp26;
  const Scalar _tmp28 = _tmp23 + _tmp27;
  const Scalar _tmp29 = _tmp22 + _tmp28;
  const Scalar _tmp30 = _tmp29 + position_vector(1, 0);
  const Scalar _tmp31 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp32 = -Scalar(0.010999999999999999) * _tmp15 -
                        Scalar(0.010999999999999999) * _tmp21 + Scalar(-0.010999999999999999);
  const Scalar _tmp33 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp34 = _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp31 + _tmp34;
  const Scalar _tmp36 = -_tmp10;
  const Scalar _tmp37 = _tmp18 + _tmp36;
  const Scalar _tmp38 = _tmp37 + position_vector(0, 0);
  const Scalar _tmp39 = _tmp38 + Scalar(-2.5202214700000001);
  const Scalar _tmp40 = Scalar(1.0) / (_tmp39);
  const Scalar _tmp41 = -_tmp22;
  const Scalar _tmp42 = _tmp28 + _tmp41;
  const Scalar _tmp43 = _tmp42 + position_vector(1, 0);
  const Scalar _tmp44 = _tmp43 + Scalar(8.3888750099999996);
  const Scalar _tmp45 = _tmp40 * _tmp44;
  const Scalar _tmp46 = _tmp14 - _tmp17;
  const Scalar _tmp47 = _tmp36 + _tmp46;
  const Scalar _tmp48 = -_tmp23 + _tmp27;
  const Scalar _tmp49 = _tmp41 + _tmp48;
  const Scalar _tmp50 = _tmp49 + position_vector(1, 0);
  const Scalar _tmp51 = _tmp50 + Scalar(8.3196563700000006);
  const Scalar _tmp52 = _tmp47 + position_vector(0, 0);
  const Scalar _tmp53 = _tmp52 + Scalar(1.9874742000000001);
  const Scalar _tmp54 = std::pow(Scalar(std::pow(_tmp51, Scalar(2)) + std::pow(_tmp53, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp55 = _tmp51 * _tmp54;
  const Scalar _tmp56 = _tmp53 * _tmp54;
  const Scalar _tmp57 =
      std::sqrt(Scalar(std::pow(_tmp39, Scalar(2)) + std::pow(_tmp44, Scalar(2))));
  const Scalar _tmp58 = Scalar(1.0) / (_tmp57);
  const Scalar _tmp59 = _tmp40 * _tmp57;
  const Scalar _tmp60 = _tmp59 * (_tmp37 * _tmp44 * _tmp58 - _tmp39 * _tmp42 * _tmp58);
  const Scalar _tmp61 = Scalar(1.0) / (_tmp45 * _tmp56 - _tmp55);
  const Scalar _tmp62 = _tmp61 * (-_tmp47 * _tmp55 + _tmp49 * _tmp56 + _tmp56 * _tmp60);
  const Scalar _tmp63 = -_tmp31;
  const Scalar _tmp64 = _tmp32 - _tmp33;
  const Scalar _tmp65 = _tmp63 + _tmp64;
  const Scalar _tmp66 = _tmp31 + _tmp64;
  const Scalar _tmp67 = _tmp56 * _tmp66;
  const Scalar _tmp68 = _tmp61 * (-_tmp45 * _tmp67 + _tmp55 * _tmp65);
  const Scalar _tmp69 = _tmp45 * _tmp66 + _tmp45 * _tmp68;
  const Scalar _tmp70 = Scalar(1.0) * _tmp42;
  const Scalar _tmp71 = -_tmp70;
  const Scalar _tmp72 = Scalar(1.0) / (_tmp49 + _tmp71);
  const Scalar _tmp73 = Scalar(1.0) * _tmp37;
  const Scalar _tmp74 = -_tmp47 + _tmp73;
  const Scalar _tmp75 = _tmp72 * _tmp74;
  const Scalar _tmp76 = _tmp61 * (-_tmp56 * _tmp65 + _tmp67);
  const Scalar _tmp77 = _tmp45 * _tmp76 - _tmp66 - _tmp69 * _tmp75;
  const Scalar _tmp78 = _tmp34 + _tmp63;
  const Scalar _tmp79 = _tmp10 + _tmp46;
  const Scalar _tmp80 = _tmp79 + position_vector(0, 0);
  const Scalar _tmp81 = _tmp80 + Scalar(1.79662371);
  const Scalar _tmp82 = _tmp22 + _tmp48;
  const Scalar _tmp83 = _tmp82 + position_vector(1, 0);
  const Scalar _tmp84 = _tmp83 + Scalar(-4.8333311099999996);
  const Scalar _tmp85 = std::pow(Scalar(std::pow(_tmp81, Scalar(2)) + std::pow(_tmp84, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp86 = _tmp81 * _tmp85;
  const Scalar _tmp87 = _tmp66 * _tmp86;
  const Scalar _tmp88 = _tmp84 * _tmp85;
  const Scalar _tmp89 = _tmp45 * _tmp86 - _tmp88;
  const Scalar _tmp90 = -_tmp45 * _tmp87 - _tmp68 * _tmp89 + _tmp78 * _tmp88;
  const Scalar _tmp91 = -_tmp75 * _tmp90 - _tmp76 * _tmp89 - _tmp78 * _tmp86 + _tmp87;
  const Scalar _tmp92 = Scalar(1.0) / (_tmp91);
  const Scalar _tmp93 = _tmp60 * _tmp86 - _tmp62 * _tmp89 - _tmp79 * _tmp88 + _tmp82 * _tmp86;
  const Scalar _tmp94 = _tmp92 * _tmp93;
  const Scalar _tmp95 = Scalar(1.0) / (_tmp93);
  const Scalar _tmp96 = _tmp91 * _tmp95;
  const Scalar _tmp97 = _tmp96 * (_tmp45 * _tmp62 - _tmp60 - _tmp77 * _tmp94);
  const Scalar _tmp98 = _tmp77 + _tmp97;
  const Scalar _tmp99 = _tmp86 * _tmp92;
  const Scalar _tmp100 = _tmp89 * _tmp92;
  const Scalar _tmp101 = -_tmp100 * _tmp98 - _tmp45;
  const Scalar _tmp102 = _tmp56 * _tmp61;
  const Scalar _tmp103 = _tmp20 + Scalar(-2.71799795);
  const Scalar _tmp104 = _tmp30 + Scalar(-4.7752063900000001);
  const Scalar _tmp105 =
      std::pow(Scalar(std::pow(_tmp103, Scalar(2)) + std::pow(_tmp104, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp106 = _tmp103 * _tmp105;
  const Scalar _tmp107 = _tmp106 * fh1;
  const Scalar _tmp108 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp109 = _tmp70 * _tmp75 + _tmp73;
  const Scalar _tmp110 = 0;
  const Scalar _tmp111 = _tmp110 * _tmp92;
  const Scalar _tmp112 = _tmp100 * _tmp110;
  const Scalar _tmp113 = Scalar(1.0) * _tmp72;
  const Scalar _tmp114 = _tmp113 * _tmp68 * _tmp74 - Scalar(1.0) * _tmp76;
  const Scalar _tmp115 = _tmp96 * (-_tmp114 * _tmp94 - Scalar(1.0) * _tmp62);
  const Scalar _tmp116 = _tmp114 + _tmp115;
  const Scalar _tmp117 = -_tmp100 * _tmp116 + Scalar(1.0);
  const Scalar _tmp118 = _tmp104 * _tmp105;
  const Scalar _tmp119 = _tmp118 * fh1;
  const Scalar _tmp120 = Scalar(1.0) * _tmp95;
  const Scalar _tmp121 = fh1 * (-_tmp106 * _tmp29 + _tmp118 * _tmp19);
  const Scalar _tmp122 = -_tmp107 * _tmp59 * (_tmp101 * _tmp102 + _tmp98 * _tmp99 + Scalar(1.0)) -
                         _tmp108 * _tmp59 * (-_tmp102 * _tmp112 + _tmp111 * _tmp86) -
                         _tmp119 * _tmp59 * (_tmp102 * _tmp117 + _tmp116 * _tmp99) -
                         _tmp121 * _tmp59 * (-_tmp102 * _tmp120 * _tmp89 + _tmp120 * _tmp86);
  const Scalar _tmp123 = Scalar(1.0) / (_tmp122);
  const Scalar _tmp124 = _tmp35 * fh1;
  const Scalar _tmp125 = -_tmp118 * _tmp124 - Scalar(5.1796800000000003) * _tmp26 - _tmp29 * fv1;
  const Scalar _tmp126 = _tmp71 + _tmp82;
  const Scalar _tmp127 = _tmp126 * _tmp75;
  const Scalar _tmp128 = Scalar(1.0) / (-_tmp127 + _tmp73 - _tmp79);
  const Scalar _tmp129 = Scalar(1.0) * _tmp128;
  const Scalar _tmp130 = _tmp127 * _tmp129 + Scalar(1.0);
  const Scalar _tmp131 = _tmp126 * _tmp129;
  const Scalar _tmp132 = -_tmp120 * _tmp90 + _tmp131 * _tmp96;
  const Scalar _tmp133 = _tmp129 * _tmp96;
  const Scalar _tmp134 = _tmp90 * _tmp92;
  const Scalar _tmp135 = _tmp126 * _tmp128;
  const Scalar _tmp136 = _tmp115 * _tmp135 - _tmp116 * _tmp134 - Scalar(1.0) * _tmp68;
  const Scalar _tmp137 = -_tmp134 * _tmp98 + _tmp135 * _tmp97 + _tmp69;
  const Scalar _tmp138 = _tmp109 * _tmp128;
  const Scalar _tmp139 = -_tmp110 * _tmp134 - _tmp126 * _tmp138 + _tmp71;
  const Scalar _tmp140 = _tmp106 * _tmp124 + Scalar(5.1796800000000003) * _tmp13 + _tmp19 * fv1;
  const Scalar _tmp141 = std::asinh(
      _tmp123 * (Scalar(1.0) * _tmp107 * (-_tmp113 * _tmp137 + _tmp129 * _tmp97) +
                 Scalar(1.0) * _tmp108 * (-_tmp109 * _tmp129 - _tmp113 * _tmp139 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp119 * (-_tmp113 * _tmp136 + _tmp115 * _tmp129) +
                 Scalar(1.0) * _tmp121 * (-_tmp113 * _tmp132 + _tmp133) +
                 Scalar(1.0) * _tmp125 * (-_tmp113 * _tmp130 + _tmp129 * _tmp75) +
                 Scalar(1.0) * _tmp140 * (-_tmp129 + _tmp131 * _tmp72)));
  const Scalar _tmp142 = Scalar(9.6622558468725703) * _tmp122;
  const Scalar _tmp143 = _tmp120 * _tmp121;
  const Scalar _tmp144 = _tmp101 * _tmp107 * _tmp61 - _tmp108 * _tmp112 * _tmp61 +
                         _tmp117 * _tmp119 * _tmp61 - _tmp143 * _tmp61 * _tmp89;
  const Scalar _tmp145 = Scalar(1.0) / (_tmp144);
  const Scalar _tmp146 = _tmp125 * _tmp72;
  const Scalar _tmp147 = _tmp129 * _tmp140;
  const Scalar _tmp148 =
      std::asinh(_tmp145 * (_tmp107 * _tmp137 * _tmp72 + _tmp108 * _tmp139 * _tmp72 +
                            _tmp119 * _tmp136 * _tmp72 + _tmp121 * _tmp132 * _tmp72 -
                            _tmp126 * _tmp147 * _tmp72 + _tmp130 * _tmp146));
  const Scalar _tmp149 = Scalar(9.6622558468725703) * _tmp144;
  const Scalar _tmp150 =
      _tmp107 * _tmp92 * _tmp98 + _tmp108 * _tmp111 + _tmp116 * _tmp119 * _tmp92 + _tmp143;
  const Scalar _tmp151 = Scalar(1.0) / (_tmp150);
  const Scalar _tmp152 = std::asinh(_tmp151 * (-_tmp107 * _tmp128 * _tmp97 + _tmp108 * _tmp138 -
                                               _tmp115 * _tmp119 * _tmp128 - _tmp121 * _tmp133 -
                                               _tmp129 * _tmp146 * _tmp74 + _tmp147));
  const Scalar _tmp153 = Scalar(9.6622558468725703) * _tmp150;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      -_tmp2 *
          (Scalar(0.86565325453551001) * _tmp0 + std::cosh(Scalar(1.0) * _tmp1) -
           std::cosh(
               Scalar(0.1034955) * _tmp0 *
               (-_tmp1 * _tmp2 -
                Scalar(4.7752063900000001) *
                    std::sqrt(Scalar(
                        Scalar(0.32397683292140877) *
                            std::pow(Scalar(1 - Scalar(0.36791786395571047) * _tmp20), Scalar(2)) +
                        std::pow(Scalar(1 - Scalar(0.20941503221602112) * _tmp30), Scalar(2))))))) +
      _tmp35 + position_vector(2, 0);
  _res(1, 0) =
      -_tmp142 *
          (Scalar(0.87653584775870996) * _tmp123 + std::cosh(Scalar(1.0) * _tmp141) -
           std::cosh(
               Scalar(0.1034955) * _tmp123 *
               (-_tmp141 * _tmp142 -
                Scalar(8.3888750099999996) *
                    std::sqrt(Scalar(
                        Scalar(0.090254729040973036) *
                            std::pow(Scalar(1 - Scalar(0.39679052492160538) * _tmp38), Scalar(2)) +
                        std::pow(Scalar(-Scalar(0.11920549523123722) * _tmp43 - 1),
                                 Scalar(2))))))) +
      _tmp66 + position_vector(2, 0);
  _res(2, 0) =
      -_tmp149 *
          (Scalar(0.87679799772039002) * _tmp145 + std::cosh(Scalar(1.0) * _tmp148) -
           std::cosh(
               Scalar(0.1034955) * _tmp145 *
               (-_tmp148 * _tmp149 -
                Scalar(8.3196563700000006) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(-Scalar(0.12019727204189803) * _tmp50 - 1), Scalar(2)) +
                        Scalar(0.057067943376852184) *
                            std::pow(Scalar(-Scalar(0.50315118556004401) * _tmp52 - 1),
                                     Scalar(2))))))) +
      _tmp65 + position_vector(2, 0);
  _res(3, 0) =
      -_tmp153 *
          (Scalar(0.86625939559540499) * _tmp151 + std::cosh(Scalar(1.0) * _tmp152) -
           std::cosh(
               Scalar(0.1034955) * _tmp151 *
               (-_tmp152 * _tmp153 -
                Scalar(4.8333311099999996) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(1 - Scalar(0.20689664689659551) * _tmp83), Scalar(2)) +
                        Scalar(0.13817235445745474) *
                            std::pow(Scalar(-Scalar(0.55659957866191134) * _tmp80 - 1),
                                     Scalar(2))))))) +
      _tmp78 + position_vector(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
